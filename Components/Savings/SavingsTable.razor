@page "/savings"
@rendermode InteractiveServer
@using Financials.Data
@using Financials.Data.Services
@using Financials.Data.Classes
@using Financials.Components.Common
@inject SavingsService SavingsService
@inject DebtService DebtService
@inject AssetService AssetService
@inject InvestmentService InvestmentService
@implements IDisposable

<link rel="stylesheet" href="/savings-table.css" />

<div class="savings-table-container">
    <div class="header">
        <div class="header-content">
            <div class="header-item time">Time</div>
            <div class="header-item annual-sav">Ann'l Sav</div>
            <div class="header-item acct-description">Acct Description</div>
            <div class="header-item report-description">Report Description</div>
            <div class="header-item as-of">As Of</div>
        </div>
        <div class="select-savings">Select Savings</div>
    </div>
    
    <div class="content-container">
        <div class="savings-table">
            <div class="savings-table-rows">
                @foreach (var saving in savings)
                {
                    <div class="savings-table-row @(selectedSaving == saving ? "selected" : "")" @onclick="@(() => SelectSaving(saving))">
                        <div class="cell time">
                            <CustomDropdown 
                                Value="@saving.Timeframe" 
                                Options="@timeframeOptions" 
                                ValueChanged="@(v => UpdateTimeframe(saving, v))" />
                        </div>
                        <div class="cell annual-sav">
                            <input type="text" 
                                   class="editable-cell" 
                                   value="@saving.Value.ToString("N0")" 
                                   @onchange="@(async (e) => await UpdateValue(saving, e))" />
                        </div>
                        <div class="cell acct-description">
                            <input type="text" 
                                   class="editable-cell" 
                                   value="@saving.Category" 
                                   @onchange="@(async (e) => await UpdateCategory(saving, e))" />
                        </div>
                        <div class="cell report-description">
                            <input type="text" 
                                   class="editable-cell" 
                                   value="@saving.ReportDesc" 
                                   @onchange="@(async (e) => await UpdateReportDesc(saving, e))" />
                        @if (!string.IsNullOrEmpty(saving.ReportHoverNote))
                        {
                            <span class="hover-note-wrapper">
                                <svg class="hover-note-icon" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M2.19996 4.84001C2.19996 3.38165 3.3816 2.20001 4.83996 2.20001H17.16C18.6183 2.20001 19.8 3.38165 19.8 4.84001V14.96C19.8 15.0769 19.7536 15.1886 19.6711 15.2711L15.2711 19.6711C15.1886 19.7536 15.0768 19.8 14.96 19.8H4.83995C3.38159 19.8 2.19995 18.6184 2.19995 17.16L2.19996 4.84001ZM4.83996 3.08001C3.868 3.08001 3.07996 3.86805 3.07996 4.84001V17.16C3.07996 18.132 3.868 18.92 4.83996 18.92H14.52V17.16C14.52 15.7017 15.7016 14.52 17.16 14.52H18.92V4.84001C18.92 3.86805 18.1319 3.08001 17.16 3.08001H4.83996ZM18.2978 15.4H17.16C16.188 15.4 15.4 16.1881 15.4 17.16V18.2978L18.2978 15.4Z" fill="black"/>
                                </svg>
                                <span class="hover-note-tooltip">@saving.ReportHoverNote</span>
                            </span>
                        }
                        </div>
                        <div class="cell as-of">
                            <input type="text" 
                                   class="editable-cell date-input" 
                                   value="@(saving.ValueDate?.ToString("MM/dd/yy") ?? "")" 
                                   placeholder="mm/dd/yy"
                                   @onchange="@(async (e) => await UpdateValueDate(saving, e))" />
                        </div>
                    </div>
                }
            </div>
            <div class="totals-row">
                <div class="total-item">
                    <span class="total-label">Total</span>
                    <span class="total-value">@(savings.Sum(s => s.Value).ToString("N0"))</span>
                </div>
                <div class="total-item">
                    <span class="total-label">After-tax</span>
                    <span class="total-value">@(GetAfterTaxTotal().ToString("N0"))</span>
                </div>
                <div class="total-item">
                    <span class="total-label">Pre-tax</span>
                    <span class="total-value">@(GetPreTaxTotal().ToString("N0"))</span>
                </div>
                <div class="total-item">
                    <span class="total-label">Tax-Free</span>
                    <span class="total-value">@(GetTaxFreeTotal().ToString("N0"))</span>
                </div>
            </div>
        </div>
        
        <div class="scrollable-section">
            @if (selectedSaving != null)
            {
                <div class="savings-details">
                    <Notes Note="@selectedSaving.Notes" Width="728px" />
                </div>

                <div style="margin-top: 30px; margin-left: 30px;">
                    <LinkTable
                        Title="Associated Income"
                        DataType="incomes"
                        Headers='new List<string> { "Annual", "Monthly", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 100, 100, 120, 250, 94 }'
                        ColumnAlignments='new List<string> { "right", "right", "left", "left", "center" }'
                        Data='allAssociatedIncomes'
                        AllData='allAvailableIncomes'
                        CurrentlySelected='GetCurrentlySelectedIncomeIndices()'
                        OnSelectionChanged='OnIncomesSelectionChanged'
                        Width="728px"
                    />
                </div>

                <div style="margin-left: 30px;">
                    <LinkTable
                        Title="Associated Account"
                        DataType="accounts"
                        Headers='new List<string> { "Own", "Balance", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 60, 100, 120, 250, 94 }'
                        ColumnAlignments='new List<string> { "center", "right", "left", "left", "center" }'
                        Data='allAssociatedAccounts'
                        AllData='allAvailableAccounts'
                        CurrentlySelected='GetCurrentlySelectedAccountIndices()'
                        OnSelectionChanged='OnAccountsSelectionChanged'
                        Width="628px"
                    />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Saving> savings = new();
    private Saving? selectedSaving;
    private List<string> timeframeOptions = new() { "NOW", "PAST", "FUTR" };

    // Data sources for LinkTable components
    private List<List<string>> allAssociatedIncomes = new();
    private List<List<string>> allAssociatedAccounts = new();
    
    // All available data for selection
    private List<List<string>> allAvailableIncomes = new();
    private List<List<string>> allAvailableAccounts = new();

    protected override async Task OnInitializedAsync()
    {
        savings = await SavingsService.GetSavingsAsync();
        selectedSaving = savings.FirstOrDefault();
        
        // Initialize data from database services for LinkTable components
        var debts = await DebtService.GetDebtsAsync();
        var assets = await AssetService.GetAssetsAsync();
        var investments = await InvestmentService.GetInvestmentsAsync();
        
        // All available incomes (using investments and savings as income sources)
        allAvailableIncomes = investments.Select(i => new List<string> 
        { 
            i.CurrentValue?.ToString("N0") ?? "0", 
            ((i.CurrentValue ?? 0) / 12).ToString("N0"), 
            i.AccountType ?? "Investment", 
            i.ReportDesc ?? "n/a", 
            i.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).Concat(savings.Select(s => new List<string> 
        { 
            s.Value.ToString("N0"), 
            (s.Value / 12).ToString("N0"), 
            s.Category, 
            s.ReportDesc, 
            s.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        })).ToList();
        
        // All available accounts (using assets as proxy for accounts)
        allAvailableAccounts = assets.Select(a => new List<string> 
        { 
            a.Owner ?? "", 
            a.Value.ToString("N0"), 
            a.Category ?? "", 
            a.ReportDesc ?? "", 
            a.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
        // Load associated items for the first saving
        if (selectedSaving != null)
        {
            LoadAssociatedItemsForSaving(selectedSaving);
        }
        else
        {
            // Initially, no items are associated (empty lists)
            allAssociatedIncomes = new List<List<string>>();
            allAssociatedAccounts = new List<List<string>>();
        }
    }

    private async Task ReloadSavings()
    {
        // Reload savings from database to ensure all changes (including hover notes) are reflected
        if (selectedSaving != null)
        {
            var selectedSavingId = selectedSaving.Id;
            savings = await SavingsService.GetSavingsAsync();
            selectedSaving = savings.FirstOrDefault(s => s.Id == selectedSavingId);
        }
    }

    private async Task UpdateTimeframe(Saving saving, string value)
    {
        Console.WriteLine($"[SavingsTable] UpdateTimeframe called - Saving ID: {saving.Id}, Old Value: '{saving.Timeframe}', New Value: '{value}'");
        saving.Timeframe = value;
        try
        {
            await SavingsService.UpdateSavingAsync(saving);
            Console.WriteLine($"[SavingsTable] UpdateTimeframe SUCCESS - Saving ID: {saving.Id} updated in database");
            await ReloadSavings();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavingsTable] UpdateTimeframe ERROR - Saving ID: {saving.Id}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateValue(Saving saving, ChangeEventArgs e)
    {
        Console.WriteLine($"[SavingsTable] UpdateValue called - Saving ID: {saving.Id}, Raw Input: '{e.Value}'");
        
        string inputString = e.Value?.ToString() ?? "";
        Console.WriteLine($"[SavingsTable] UpdateValue - Input string: '{inputString}'");
        
        // Try parsing with different methods
        bool parseSuccess = decimal.TryParse(inputString, out decimal value);
        Console.WriteLine($"[SavingsTable] UpdateValue - Parse success: {parseSuccess}, Parsed value: {value}");
        
        if (!parseSuccess)
        {
            // Try removing commas and parsing again
            string cleanInput = inputString.Replace(",", "").Replace("$", "").Trim();
            Console.WriteLine($"[SavingsTable] UpdateValue - Clean input: '{cleanInput}'");
            parseSuccess = decimal.TryParse(cleanInput, out value);
            Console.WriteLine($"[SavingsTable] UpdateValue - Clean parse success: {parseSuccess}, Parsed value: {value}");
        }
        
        if (parseSuccess)
        {
            Console.WriteLine($"[SavingsTable] UpdateValue - Saving ID: {saving.Id}, Old Value: {saving.Value}, New Value: {value}");
            saving.Value = value;
            try
            {
                await SavingsService.UpdateSavingAsync(saving);
                Console.WriteLine($"[SavingsTable] UpdateValue SUCCESS - Saving ID: {saving.Id} updated in database");
                await ReloadSavings();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[SavingsTable] UpdateValue ERROR - Saving ID: {saving.Id}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[SavingsTable] UpdateValue - Failed to parse decimal value");
        }
    }

    private async Task UpdateCategory(Saving saving, ChangeEventArgs e)
    {
        Console.WriteLine($"[SavingsTable] UpdateCategory called - Saving ID: {saving.Id}, Old Value: '{saving.Category}', New Value: '{e.Value}'");
        saving.Category = e.Value?.ToString() ?? "";
        try
        {
            await SavingsService.UpdateSavingAsync(saving);
            Console.WriteLine($"[SavingsTable] UpdateCategory SUCCESS - Saving ID: {saving.Id} updated in database");
            await ReloadSavings();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavingsTable] UpdateCategory ERROR - Saving ID: {saving.Id}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateReportDesc(Saving saving, ChangeEventArgs e)
    {
        Console.WriteLine($"[SavingsTable] UpdateReportDesc called - Saving ID: {saving.Id}, Old Value: '{saving.ReportDesc}', New Value: '{e.Value}'");
        saving.ReportDesc = e.Value?.ToString() ?? "";
        try
        {
            await SavingsService.UpdateSavingAsync(saving);
            Console.WriteLine($"[SavingsTable] UpdateReportDesc SUCCESS - Saving ID: {saving.Id} updated in database");
            await ReloadSavings();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavingsTable] UpdateReportDesc ERROR - Saving ID: {saving.Id}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateValueDate(Saving saving, ChangeEventArgs e)
    {
        Console.WriteLine($"[SavingsTable] UpdateValueDate called - Saving ID: {saving.Id}, Raw Input: '{e.Value}'");
        
        string inputString = e.Value?.ToString() ?? "";
        if (string.IsNullOrEmpty(inputString))
        {
            saving.ValueDate = null;
        }
        else if (DateTime.TryParseExact(inputString, "MM/dd/yy", null, System.Globalization.DateTimeStyles.None, out DateTime valueDate))
        {
            Console.WriteLine($"[SavingsTable] UpdateValueDate - Saving ID: {saving.Id}, Old Value: {saving.ValueDate}, New Value: {valueDate}");
            saving.ValueDate = valueDate;
        }
        else if (DateTime.TryParse(inputString, out valueDate))
        {
            Console.WriteLine($"[SavingsTable] UpdateValueDate - Saving ID: {saving.Id}, Old Value: {saving.ValueDate}, New Value: {valueDate} (fallback parse)");
            saving.ValueDate = valueDate;
        }
        else
        {
            Console.WriteLine($"[SavingsTable] UpdateValueDate - Failed to parse date value");
            return;
        }
        
        try
        {
            await SavingsService.UpdateSavingAsync(saving);
            Console.WriteLine($"[SavingsTable] UpdateValueDate SUCCESS - Saving ID: {saving.Id} updated in database");
            await ReloadSavings();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SavingsTable] UpdateValueDate ERROR - Saving ID: {saving.Id}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private void SelectSaving(Saving saving)
    {
        selectedSaving = saving;
        
        // Load associated items for the selected saving
        LoadAssociatedItemsForSaving(saving);
        
        StateHasChanged();
    }

    private void LoadAssociatedItemsForSaving(Saving saving)
    {
        // Load associated incomes
        allAssociatedIncomes = saving.AssociatedIncomes
            .Where(index => index < allAvailableIncomes.Count)
            .Select(index => allAvailableIncomes[index])
            .ToList();
            
        // Load associated accounts (using assets as proxy)
        allAssociatedAccounts = saving.AssociatedAssets
            .Where(index => index < allAvailableAccounts.Count)
            .Select(index => allAvailableAccounts[index])
            .ToList();
    }

    private decimal GetAfterTaxTotal()
    {
        // After-tax savings: Savings, Checking, Money Market, Emergency Fund
        var afterTaxCategories = new[] { "Savings", "Checking", "Money Market", "Emergency Fund" };
        return savings.Where(s => afterTaxCategories.Contains(s.Category)).Sum(s => s.Value);
    }

    private decimal GetPreTaxTotal()
    {
        // Pre-tax savings: CD (assuming traditional CD)
        var preTaxCategories = new[] { "CD" };
        return savings.Where(s => preTaxCategories.Contains(s.Category)).Sum(s => s.Value);
    }

    private decimal GetTaxFreeTotal()
    {
        // Tax-free savings: None in current data, but could include Roth accounts, etc.
        var taxFreeCategories = new[] { "Roth", "HSA", "Municipal" };
        return savings.Where(s => taxFreeCategories.Contains(s.Category)).Sum(s => s.Value);
    }

    private async Task OnIncomesSelectionChanged(List<int> selectedIndices)
    {
        // Update the associated incomes based on selection
        allAssociatedIncomes = selectedIndices
            .Where(index => index < allAvailableIncomes.Count)
            .Select(index => allAvailableIncomes[index])
            .ToList();
        
        // Update the selected saving's associated incomes
        if (selectedSaving != null)
        {
            selectedSaving.AssociatedIncomes = selectedIndices.ToList();
            await SavingsService.UpdateSavingAsync(selectedSaving);
            await ReloadSavings();
        }
        
        StateHasChanged();
    }

    private async Task OnAccountsSelectionChanged(List<int> selectedIndices)
    {
        // Update the associated accounts based on selection
        allAssociatedAccounts = selectedIndices
            .Where(index => index < allAvailableAccounts.Count)
            .Select(index => allAvailableAccounts[index])
            .ToList();
        
        // Update the selected saving's associated assets (used as accounts)
        if (selectedSaving != null)
        {
            selectedSaving.AssociatedAssets = selectedIndices.ToList();
            await SavingsService.UpdateSavingAsync(selectedSaving);
            await ReloadSavings();
        }
        
        StateHasChanged();
    }

    private List<int> GetCurrentlySelectedIncomeIndices()
    {
        if (selectedSaving == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var incomeIndex in selectedSaving.AssociatedIncomes)
        {
            if (incomeIndex < allAvailableIncomes.Count)
            {
                indices.Add(incomeIndex);
            }
        }
        return indices;
    }

    private List<int> GetCurrentlySelectedAccountIndices()
    {
        if (selectedSaving == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var accountIndex in selectedSaving.AssociatedAssets)
        {
            if (accountIndex < allAvailableAccounts.Count)
            {
                indices.Add(accountIndex);
            }
        }
        return indices;
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<script src="/js/input-formatting.js"></script>
<script src="/js/tooltip-positioning.js"></script>
