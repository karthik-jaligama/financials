@page "/assets"
@rendermode InteractiveServer
@using Financials.Data
@using Financials.Data.Services
@using Financials.Data.Classes
@using Financials.Components.Common
@inject AssetService AssetService
@inject DebtService DebtService
@inject InvestmentService InvestmentService
@inject SavingsService SavingsService
@implements IDisposable

<link rel="stylesheet" href="/assets-table.css" />

<div class="assets-container">
    <div class="header">
        <div class="header-content">
            <div class="header-item time">Time</div>
            <div class="header-item owner">Owner</div>
            <div class="header-item asset-value">Value</div>
            <div class="header-item category">Category</div>
            <div class="header-item report-description">Report Description</div>
            <div class="header-item as-of">As Of</div>
        </div>
        <div class="select-asset">Select Asset</div>
    </div>
    
    <div class="content-container">
        <div class="assets-table">
            <div class="assets-rows">
                @foreach (var asset in assets)
                {
                    <div class="asset-row @(selectedAsset == asset ? "selected" : "")" 
                         @onclick="() => SelectAsset(asset)">
                        <div class="cell time">
                            <CustomDropdown 
                                Value="@asset.Timeframe" 
                                Options="@timeframeOptions" 
                                ValueChanged="@(v => UpdateTimeframe(asset, v))" />
                        </div>
                        <div class="cell owner">
                            <CustomDropdown 
                                Value="@asset.Owner" 
                                Options="@ownerOptions" 
                                ValueChanged="@(v => UpdateOwner(asset, v))" />
                        </div>
                        <div class="cell asset-value">
                            <input type="text" 
                                   class="editable-cell" 
                                   value="@asset.Value.ToString("N0")" 
                                   @onchange="@(async (e) => await UpdateValue(asset, e))" />
                        </div>
                        <div class="cell category">
                            <CustomDropdown 
                                Value="@asset.Category" 
                                Options="@categoryOptions" 
                                ValueChanged="@(v => UpdateCategory(asset, v))" />
                        </div>
                        <div class="cell report-description">
                            <input type="text" 
                                   class="editable-cell" 
                                   value="@(asset.ReportDesc ?? "")" 
                                   @onchange="@(async (e) => await UpdateReportDesc(asset, e))" />
                        @if (!string.IsNullOrEmpty(asset.ReportHoverNote))
                        {
                            <span class="hover-note-wrapper">
                                <svg class="hover-note-icon" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M2.19996 4.84001C2.19996 3.38165 3.3816 2.20001 4.83996 2.20001H17.16C18.6183 2.20001 19.8 3.38165 19.8 4.84001V14.96C19.8 15.0769 19.7536 15.1886 19.6711 15.2711L15.2711 19.6711C15.1886 19.7536 15.0768 19.8 14.96 19.8H4.83995C3.38159 19.8 2.19995 18.6184 2.19995 17.16L2.19996 4.84001ZM4.83996 3.08001C3.868 3.08001 3.07996 3.86805 3.07996 4.84001V17.16C3.07996 18.132 3.868 18.92 4.83996 18.92H14.52V17.16C14.52 15.7017 15.7016 14.52 17.16 14.52H18.92V4.84001C18.92 3.86805 18.1319 3.08001 17.16 3.08001H4.83996ZM18.2978 15.4H17.16C16.188 15.4 15.4 16.1881 15.4 17.16V18.2978L18.2978 15.4Z" fill="black"/>
                                </svg>
                                <span class="hover-note-tooltip">@asset.ReportHoverNote</span>
                            </span>
                        }
                        </div>
                        <div class="cell as-of">
                            <input type="text" 
                                   class="editable-cell date-input" 
                                   value="@(asset.ValueDate?.ToString("MM/dd/yy") ?? "")" 
                                   placeholder="mm/dd/yy"
                                   @onchange="@(async (e) => await UpdateValueDate(asset, e))" />
                        </div>
                    </div>
                }
            </div>
            <div class="totals-row">
                <div class="total-item">
                    <span class="total-label">Total</span>
                    <span class="total-value">@(assets.Sum(a => a.Value).ToString("N0"))</span>
                </div>
                @foreach (var owner in assets.Select(a => a.Owner).Distinct().Where(o => !string.IsNullOrEmpty(o)).OrderBy(o => o))
                {
                    <div class="owner-total-item">
                        <span class="owner-label">@owner)</span>
                        <span class="owner-value">@(assets.Where(a => a.Owner == owner).Sum(a => a.Value).ToString("N0"))</span>
                    </div>
                }
            </div>
        </div>
        
        <div class="scrollable-section">
            @if (selectedAsset != null)
            {
                <div class="asset-details">
                    <Notes Note="@selectedAsset.Notes" Width="728px" />

                    <div style="margin: 30px;">
                        <PurchaseDetailsSection Asset="@selectedAsset" OnAssetUpdated="@HandleAssetUpdated" />
                    </div>

                </div>

                <div style="margin-top: 30px; margin-left: 30px;">
                    <LinkTable
                        Title="Associated Loans"
                        DataType="debts"
                        Headers='new List<string> { "Balance", "Pmt Made", "Rate", "Term", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 100, 100, 80, 80, 200, 94 }'
                        ColumnAlignments='new List<string> { "right", "right", "right", "center", "left", "center" }'
                        Data='allAssociatedDebts'
                        AllData='allAvailableDebts'
                        CurrentlySelected='GetCurrentlySelectedDebtIndices()'
                        OnSelectionChanged='OnDebtsSelectionChanged'
                        Width="728px"
                    />
                </div>
                <div style="margin-left: 30px;">
                    <LinkTable
                        Title="Associated Insurance"
                        DataType="insurances"
                        Headers='new List<string> { "Own", "Value", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 60, 100, 120, 200, 94 }'
                        ColumnAlignments='new List<string> { "center", "right", "left", "left", "center" }'
                        Data='allAssociatedInsurances'
                        AllData='allAvailableInsurances'
                        CurrentlySelected='GetCurrentlySelectedInsuranceIndices()'
                        OnSelectionChanged='OnInsurancesSelectionChanged'
                        Width="728px"
                    />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Asset> assets = new();
    private Asset? selectedAsset;
    private List<string> timeframeOptions = new() { "NOW", "PAST", "FUTR" };
    private List<string> ownerOptions = new() { "JT", "C1", "C2", "TR", "LLC", "??" };
    private List<string> categoryOptions = new() 
    { 
        "Real Estate", 
        "Vehicle", 
        "Land", 
        "Collectibles", 
        "Boat", 
        "Company", 
        "Other" 
    };

    // Data sources for LinkTable components
    private List<List<string>> allAssociatedDebts = new();
    private List<List<string>> allAssociatedInsurances = new();
    
    // All available data for selection
    private List<List<string>> allAvailableDebts = new();
    private List<List<string>> allAvailableInsurances = new();

    protected override async Task OnInitializedAsync()
    {
        assets = await AssetService.GetAssetsAsync();
        selectedAsset = assets.FirstOrDefault();
        
        // Initialize data from database services for LinkTable components
        var debts = await DebtService.GetDebtsAsync();
        var investments = await InvestmentService.GetInvestmentsAsync();
        var savings = await SavingsService.GetSavingsAsync();
        
        // All available debts (for selection modal)
        allAvailableDebts = debts.Select(d => new List<string> 
        { 
            d.Balance?.ToString("N0") ?? "0", 
            d.PaymentMade?.ToString("N0") ?? "0", 
            d.InterestRate ?? "n/a", 
            d.Term?.ToString() ?? "n/a", 
            d.ReportDesc ?? "n/a", 
            d.BalanceDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
        // All available insurances (using assets as proxy)
        allAvailableInsurances = assets.Select(a => new List<string> 
        { 
            a.Owner ?? "", 
            a.Value.ToString("N0"), 
            "Insurance", 
            a.ReportDesc ?? "", 
            a.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
        // Load associated items for the first asset
        if (selectedAsset != null)
        {
            LoadAssociatedItemsForAsset(selectedAsset);
        }
        else
        {
            // Initially, no items are associated (empty lists)
            allAssociatedDebts = new List<List<string>>();
            allAssociatedInsurances = new List<List<string>>();
        }
    }

    private async Task ReloadAssets()
    {
        // Reload assets from database to ensure all changes (including hover notes) are reflected
        if (selectedAsset != null)
        {
            var selectedAssetId = selectedAsset.AssetId;
            assets = await AssetService.GetAssetsAsync();
            selectedAsset = assets.FirstOrDefault(a => a.AssetId == selectedAssetId);
        }
    }

    private async Task HandleAssetUpdated()
    {
        await ReloadAssets();
        StateHasChanged();
    }

    private async Task UpdateTimeframe(Asset asset, string value)
    {
        Console.WriteLine($"[AssetsTable] UpdateTimeframe called - Asset ID: {asset.AssetId}, Old Value: '{asset.Timeframe}', New Value: '{value}'");
        asset.Timeframe = value;
        try
        {
            await AssetService.UpdateAssetAsync(asset);
            Console.WriteLine($"[AssetsTable] UpdateTimeframe SUCCESS - Asset ID: {asset.AssetId} updated in database");
            await ReloadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AssetsTable] UpdateTimeframe ERROR - Asset ID: {asset.AssetId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateOwner(Asset asset, string value)
    {
        Console.WriteLine($"[AssetsTable] UpdateOwner called - Asset ID: {asset.AssetId}, Old Value: '{asset.Owner}', New Value: '{value}'");
        asset.Owner = value;
        try
        {
            await AssetService.UpdateAssetAsync(asset);
            Console.WriteLine($"[AssetsTable] UpdateOwner SUCCESS - Asset ID: {asset.AssetId} updated in database");
            await ReloadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AssetsTable] UpdateOwner ERROR - Asset ID: {asset.AssetId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateCategory(Asset asset, string value)
    {
        Console.WriteLine($"[AssetsTable] UpdateCategory called - Asset ID: {asset.AssetId}, Old Value: '{asset.Category}', New Value: '{value}'");
        asset.Category = value;
        try
        {
            await AssetService.UpdateAssetAsync(asset);
            Console.WriteLine($"[AssetsTable] UpdateCategory SUCCESS - Asset ID: {asset.AssetId} updated in database");
            await ReloadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AssetsTable] UpdateCategory ERROR - Asset ID: {asset.AssetId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateValue(Asset asset, ChangeEventArgs e)
    {
        Console.WriteLine($"[AssetsTable] UpdateValue called - Asset ID: {asset.AssetId}, Raw Input: '{e.Value}'");
        
        string inputString = e.Value?.ToString() ?? "";
        Console.WriteLine($"[AssetsTable] UpdateValue - Input string: '{inputString}'");
        
        // Try parsing with different methods
        bool parseSuccess = decimal.TryParse(inputString, out decimal value);
        Console.WriteLine($"[AssetsTable] UpdateValue - Parse success: {parseSuccess}, Parsed value: {value}");
        
        if (!parseSuccess)
        {
            // Try removing commas and parsing again
            string cleanInput = inputString.Replace(",", "").Replace("$", "").Trim();
            Console.WriteLine($"[AssetsTable] UpdateValue - Clean input: '{cleanInput}'");
            parseSuccess = decimal.TryParse(cleanInput, out value);
            Console.WriteLine($"[AssetsTable] UpdateValue - Clean parse success: {parseSuccess}, Parsed value: {value}");
        }
        
        if (parseSuccess)
        {
            Console.WriteLine($"[AssetsTable] UpdateValue - Asset ID: {asset.AssetId}, Old Value: {asset.Value}, New Value: {value}");
            asset.Value = value;
            try
            {
                await AssetService.UpdateAssetAsync(asset);
                Console.WriteLine($"[AssetsTable] UpdateValue SUCCESS - Asset ID: {asset.AssetId} updated in database");
                await ReloadAssets();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[AssetsTable] UpdateValue ERROR - Asset ID: {asset.AssetId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[AssetsTable] UpdateValue - Failed to parse decimal value");
        }
    }

    private async Task UpdateReportDesc(Asset asset, ChangeEventArgs e)
    {
        Console.WriteLine($"[AssetsTable] UpdateReportDesc called - Asset ID: {asset.AssetId}, Old Value: '{asset.ReportDesc}', New Value: '{e.Value}'");
        asset.ReportDesc = e.Value?.ToString() ?? "";
        try
        {
            await AssetService.UpdateAssetAsync(asset);
            Console.WriteLine($"[AssetsTable] UpdateReportDesc SUCCESS - Asset ID: {asset.AssetId} updated in database");
            await ReloadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AssetsTable] UpdateReportDesc ERROR - Asset ID: {asset.AssetId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateValueDate(Asset asset, ChangeEventArgs e)
    {
        Console.WriteLine($"[AssetsTable] UpdateValueDate called - Asset ID: {asset.AssetId}, Raw Input: '{e.Value}'");
        
        string inputString = e.Value?.ToString() ?? "";
        if (string.IsNullOrEmpty(inputString))
        {
            asset.ValueDate = null;
        }
        else if (DateTime.TryParseExact(inputString, "MM/dd/yy", null, System.Globalization.DateTimeStyles.None, out DateTime valueDate))
        {
            Console.WriteLine($"[AssetsTable] UpdateValueDate - Asset ID: {asset.AssetId}, Old Value: {asset.ValueDate}, New Value: {valueDate}");
            asset.ValueDate = valueDate;
        }
        else if (DateTime.TryParse(inputString, out valueDate))
        {
            Console.WriteLine($"[AssetsTable] UpdateValueDate - Asset ID: {asset.AssetId}, Old Value: {asset.ValueDate}, New Value: {valueDate} (fallback parse)");
            asset.ValueDate = valueDate;
        }
        else
        {
            Console.WriteLine($"[AssetsTable] UpdateValueDate - Failed to parse date value");
            return;
        }
        
        try
        {
            await AssetService.UpdateAssetAsync(asset);
            Console.WriteLine($"[AssetsTable] UpdateValueDate SUCCESS - Asset ID: {asset.AssetId} updated in database");
            await ReloadAssets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AssetsTable] UpdateValueDate ERROR - Asset ID: {asset.AssetId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private void SelectAsset(Asset asset)
    {
        selectedAsset = asset;
        
        // Load associated items for the selected asset
        LoadAssociatedItemsForAsset(asset);
    }

    private void LoadAssociatedItemsForAsset(Asset asset)
    {
        // Load associated debts
        allAssociatedDebts = asset.AssociatedDebts
            .Where(index => index < allAvailableDebts.Count)
            .Select(index => allAvailableDebts[index])
            .ToList();
            
        // Load associated insurances
        allAssociatedInsurances = asset.AssociatedInsurances
            .Where(index => index < allAvailableInsurances.Count)
            .Select(index => allAvailableInsurances[index])
            .ToList();
    }

    private async Task OnDebtsSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[AssetsTable] OnDebtsSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated debts based on selection
        allAssociatedDebts = selectedIndices
            .Where(index => index < allAvailableDebts.Count)
            .Select(index => allAvailableDebts[index])
            .ToList();
        
        // Update the selected asset's associated debts
        if (selectedAsset != null)
        {
            Console.WriteLine($"[AssetsTable] OnDebtsSelectionChanged - Updating Asset ID: {selectedAsset.AssetId} with {selectedIndices.Count} associated debts");
            selectedAsset.AssociatedDebts = selectedIndices.ToList();
            try
            {
                await AssetService.UpdateAssetAsync(selectedAsset);
                Console.WriteLine($"[AssetsTable] OnDebtsSelectionChanged SUCCESS - Asset ID: {selectedAsset.AssetId} updated in database");
                await ReloadAssets();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[AssetsTable] OnDebtsSelectionChanged ERROR - Asset ID: {selectedAsset.AssetId}, Error: {ex.Message}");
            }
        }
        
        StateHasChanged();
    }

    private async Task OnInsurancesSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[AssetsTable] OnInsurancesSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated insurances based on selection
        allAssociatedInsurances = selectedIndices
            .Where(index => index < allAvailableInsurances.Count)
            .Select(index => allAvailableInsurances[index])
            .ToList();
        
        // Update the selected asset's associated insurances
        if (selectedAsset != null)
        {
            Console.WriteLine($"[AssetsTable] OnInsurancesSelectionChanged - Updating Asset ID: {selectedAsset.AssetId} with {selectedIndices.Count} associated insurances");
            selectedAsset.AssociatedInsurances = selectedIndices.ToList();
            try
            {
                await AssetService.UpdateAssetAsync(selectedAsset);
                Console.WriteLine($"[AssetsTable] OnInsurancesSelectionChanged SUCCESS - Asset ID: {selectedAsset.AssetId} updated in database");
                await ReloadAssets();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[AssetsTable] OnInsurancesSelectionChanged ERROR - Asset ID: {selectedAsset.AssetId}, Error: {ex.Message}");
            }
        }
        
        StateHasChanged();
    }

    private List<int> GetCurrentlySelectedDebtIndices()
    {
        if (selectedAsset == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var debtIndex in selectedAsset.AssociatedDebts)
        {
            if (debtIndex < allAvailableDebts.Count)
            {
                indices.Add(debtIndex);
            }
        }
        return indices;
    }

    private List<int> GetCurrentlySelectedInsuranceIndices()
    {
        if (selectedAsset == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var insuranceIndex in selectedAsset.AssociatedInsurances)
        {
            if (insuranceIndex < allAvailableInsurances.Count)
            {
                indices.Add(insuranceIndex);
            }
        }
        return indices;
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<script src="/js/input-formatting.js"></script>
<script src="/js/tooltip-positioning.js"></script> 