@using Microsoft.JSInterop
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="dropdown-container">
    <select class="custom-dropdown" value="@Value" 
            @onchange="OnValueChanged" 
            @onclick="HandleClick"
            @onblur="() => { isOpen = false; StateHasChanged(); }">
        @foreach (var option in Options)
        {
            <option value="@option">@option</option>
        }
    </select>
    <svg class="dropdown-arrow @(isOpen ? "rotated" : "")" 
         @onclick:stopPropagation
         @onclick="HandleClick"
         @onmousedown:preventDefault
         xmlns="http://www.w3.org/2000/svg" 
         width="12" height="6"
         viewBox="0 0 14 8" fill="none">
        <path d="M1.38362 0.641587C1.17175 0.443641 0.828247 0.443641 0.616379 0.641587C0.404511 0.839533 0.404511 1.16047 0.616379 1.35841L1.38362 0.641587ZM0.616379 1.35841L6.98211 7.30584L7.74935 6.58902L1.38362 0.641587L0.616379 1.35841Z" fill="#4C4C4F"/>
        <path d="M13.3837 1.41098C13.5956 1.21304 13.5956 0.892102 13.3837 0.694156C13.1718 0.49621 12.8283 0.49621 12.6164 0.694156L13.3837 1.41098ZM7.01796 7.35841L13.3837 1.41098L12.6164 0.694156L6.25072 6.64159L7.01796 7.35841Z" fill="#4C4C4F"/>
    </svg>
</div>

<style>
.dropdown-container {
    position: relative;
    width: 100%;
    height: 100%;
}

.custom-dropdown {
    color: #000;
    font-family: Inter;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 130%;
    letter-spacing: 0.24px;
    border: none;
    background: transparent;
    cursor: pointer;
    width: 100%;
    height: 100%;
    text-align: left;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding-right: 14px;
}

.custom-dropdown:focus {
    outline: none;
}

.dropdown-arrow {
    position: absolute;
    right: 0px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    cursor: pointer;
}

.dropdown-arrow.rotated {
    transform: translateY(-50%) rotate(180deg);
}

.cell.value {
    justify-content: flex-end; /* Right align the value */
}

/* Style the dropdown list */
.custom-dropdown option {
    font-family: Inter;
    font-size: 16px;
    font-weight: 400;
    line-height: 130%;
    letter-spacing: 0.24px;
    padding: 8px 10px;
    background: #FFF;
} 
</style>

@code {
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public List<string> Options { get; set; } = new();
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private bool isOpen;

    private void HandleClick()
    {
        isOpen = !isOpen;
        StateHasChanged();
    }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Value = e.Value.ToString()!;
            await ValueChanged.InvokeAsync(Value);
        }
    }
} 