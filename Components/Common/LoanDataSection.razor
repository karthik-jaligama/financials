@using Financials.Data
@using Financials.Data.Services
@inject IJSRuntime JSRuntime
@inject DebtService DebtService

<div class="loan-data-section">
    <div class="loan-grid-table">
        <div class="loan-details">
            <div class="header loan-details-header">Loan Details</div>
            <div class="label">Orig Loan Date</div>
            <div class="label">Orig Loan Amt</div>
            <div class="label">Borrow Limit</div>
            <div class="label">Prin & Interest</div>
            <div class="label">Escrow</div>
        </div>
        <div></div>
        <div class="amount">
            <div class="header amount-header">Amount</div>
            <div class="value date-field loan-date-value"><input type="text" class="date-input" value="@(Debt?.OriginalLoanDate?.ToString("MM/dd/yy") ?? "")" placeholder="mm/dd/yy" @onchange="@(async (e) => await UpdateOriginalLoanDate(e))" /></div>
            <div class="value loan-amount-value"><input type="text" class="editable-cell" value="@FormatNumber(Debt?.OriginalLoanAmount ?? 0)" @onchange="@(async (e) => await UpdateOriginalLoanAmount(e))" /></div>
            <div class="value borrow-limit-value"><input type="text" class="editable-cell" value="@FormatNumber(Debt?.BorrowLimit ?? 0)" @onchange="@(async (e) => await UpdateBorrowLimit(e))" /></div>
            <div class="value balance-value"><input type="text" class="editable-cell" value="@FormatNumber(Debt?.Balance ?? 0)" @onchange="@(async (e) => await UpdateBalance(e))" /></div>
            <div class="value escrow-value"><input type="text" class="editable-cell" value="@FormatNumber(Debt?.EscrowPayment ?? 0)" @onchange="@(async (e) => await UpdateEscrowPayment(e))" /></div>
        </div>
        <div></div>
        <div class="lender-information">
            <div class="header lender-information-header">Lender Information</div>
            <div class="lender-information-grid-table">
                <div class="lender-labels">
                    <div class="label">Loan #</div>
                    <div class="label">Loan Rep</div>
                    <div class="label">Phone #</div>
                    <div class="label">Lender</div>
                    <div class="label">As of Date</div>
                </div>
                <div></div>
                <div class="lender-values">
                    <div class="value loan-number-value"><input type="text" value="@(Debt?.LoanNumber ?? "")" @oninput="@(async (e) => await UpdateLoanNumber(e))" /></div>
                    <div class="value loan-rep-value"><input type="text" value="@(Debt?.LoanRepresentative ?? "")" @oninput="@(async (e) => await UpdateLoanRepresentative(e))" /></div>
                    <div class="phone-number-table">
                        <div class="value lender-phone-value"><input type="text" value="@(Debt?.LenderPhone ?? "")" @oninput="@(async (e) => await UpdateLenderPhone(e))" /></div>
                        <div></div>
                        <div class="label">Ext:</div>
                        <div></div>
                        <div class="value phone-ext-value"><input type="text" value="@(Debt?.LenderPhoneExt ?? "")" @oninput="@(async (e) => await UpdateLenderPhoneExt(e))" /></div>
                    </div>
                    <div class="value lender-name-value"><input type="text" value="@(Debt?.LenderName ?? "")" @oninput="@(async (e) => await UpdateLenderName(e))" /></div>
                    <div class="value date-field escrow-date-value"><input type="text" class="date-input" value="@(Debt?.EscrowPaymentDate?.ToString("MM/dd/yy") ?? "")" placeholder="mm/dd/yy" @onchange="@(async (e) => await UpdateEscrowPaymentDate(e))" /></div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.loan-data-section {
    width: 575px;
    height: 187px;
    flex-shrink: 0;
    border-radius: 5px;
    border: 0.5px solid #4C4C4F;
    background: #FFF;
    margin-left: 30px;
}

.loan-grid-table {
    display: grid;
    padding: 18.5px 20px 20px 20px;
    grid-template-columns: 117px 20px 100px 0px 1fr;
    gap: 0px;
}

.lender-information-grid-table {
    display: grid;
    grid-template-columns: 84px 15px 1fr;
    gap: 0px;
}

.loan-details .header,
.amount .header,
.lender-information .header {
  margin-bottom: 6.5px;
}

.loan-details .header {
  text-align: right;
}

.loan-details div,
.amount div,
.lender-information div {
  margin-bottom: 4px;
}

.loan-details div:last-child,
.amount div:last-child,
.lender-information div:last-child {
  margin-bottom: 0;
}

.phone-number-table div {
    margin-bottom: 0px;
}

.phone-number-table {
    display: grid;
    grid-template-columns: 125px 10px 30px 6px 25px;
    gap: 0px;
}

.header {
    color: #093B5D;
    text-align: left;
    font-family: Inter;
    font-size: 16px;
    font-style: normal;
    font-weight: 700;
    line-height: 130%;
    letter-spacing: 0.24px;
}

.loan-details-header {
    text-align: right;
}

.lender-information-header {
    margin-left: 37px;
}

.label {
    color: #000;
    text-align: right;
    font-family: Inter;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 130%;
    letter-spacing: 0.24px;
}

.value {
    color: #0775C4;
    font-family: Inter;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 130%;
    letter-spacing: 0.24px;
}

input,
input[type="text"],
input[type="number"],
input[type="date"] {
    color: #0775C4;
    font-family: Inter;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 130%;
    letter-spacing: 0.24px;
    background: none;
    border: none;
    outline: none;
    padding: 0;
    margin: 0;
    box-shadow: none;
    width: 100%;
    box-sizing: border-box;
}

input:focus {
    color: #0775C4;
    background: none;
    outline: none;
}

input:active {
    color: #0775C4;
    background: none;
    outline: none;
}

input:hover {
    background: none;
}

.date-input {
    color: #0775C4;
    font-family: Inter;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 20.8px;
    letter-spacing: 0.24px;
    background: none;
    border: none;
    outline: none;
    padding: 0 !important;
    margin: 0 !important;
    box-shadow: none;
    width: 120px;
    transition: background-color 0.2s ease;
    box-sizing: border-box;
    cursor: pointer;
    -moz-appearance: textfield;
    appearance: textfield;
    letter-spacing: 0;
    font-variant-numeric: tabular-nums;
}

.date-field {
    height: 20.8px;
}

/* Remove spinner buttons from number inputs */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

input[type="number"] {
    -moz-appearance: textfield;
}

.editable-cell {
    cursor: text;
}

.phone-ext-value input {
    width: 29px !important;
    min-width: 29px !important;
}
</style>

@code {
    [Parameter]
    public Debt? Debt { get; set; }
    
    [Parameter]
    public EventCallback OnDebtUpdated { get; set; }

    private string FormatNumber(decimal value)
    {
        // If the decimal part is zero, format without decimals
        if (value % 1 == 0)
        {
            return value.ToString("N0");
        }
        return value.ToString("N2");
    }

    // Update methods with console logging
    private async Task UpdateOriginalLoanDate(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanDate called - Raw Input: '{e.Value}'");
        string inputString = e.Value?.ToString() ?? "";
        if (Debt != null)
        {
            if (string.IsNullOrEmpty(inputString))
            {
                Debt.OriginalLoanDate = null;
            }
            else if (DateTime.TryParseExact(inputString, "MM/dd/yy", null, System.Globalization.DateTimeStyles.None, out DateTime date))
            {
                Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanDate - Debt ID: {Debt.DebtId}, Old Value: {Debt.OriginalLoanDate}, New Value: {date}");
                Debt.OriginalLoanDate = date;
            }
            else
            {
                Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanDate - Failed to parse date");
                return;
            }
            
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanDate SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanDate ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanDate - Debt is null");
        }
    }

    private async Task UpdateOriginalLoanAmount(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanAmount called - Raw Input: '{e.Value}'");
        if (Debt != null && decimal.TryParse(e.Value?.ToString()?.Replace(",", ""), out decimal value))
        {
            Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanAmount - Debt ID: {Debt.DebtId}, Old Value: {Debt.OriginalLoanAmount}, New Value: {value}");
            Debt.OriginalLoanAmount = value;
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanAmount SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanAmount ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateOriginalLoanAmount - Failed to parse decimal or Debt is null");
        }
    }

    private async Task UpdateBorrowLimit(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateBorrowLimit called - Raw Input: '{e.Value}'");
        if (Debt != null && decimal.TryParse(e.Value?.ToString()?.Replace(",", ""), out decimal value))
        {
            Console.WriteLine($"[LoanDataSection] UpdateBorrowLimit - Debt ID: {Debt.DebtId}, Old Value: {Debt.BorrowLimit}, New Value: {value}");
            Debt.BorrowLimit = value;
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateBorrowLimit SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateBorrowLimit ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateBorrowLimit - Failed to parse decimal or Debt is null");
        }
    }

    private async Task UpdateBalance(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateBalance called - Raw Input: '{e.Value}'");
        if (Debt != null && decimal.TryParse(e.Value?.ToString()?.Replace(",", ""), out decimal value))
        {
            Console.WriteLine($"[LoanDataSection] UpdateBalance - Debt ID: {Debt.DebtId}, Old Value: {Debt.Balance}, New Value: {value}");
            Debt.Balance = value;
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateBalance SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateBalance ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateBalance - Failed to parse decimal or Debt is null");
        }
    }

    private async Task UpdateEscrowPayment(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateEscrowPayment called - Raw Input: '{e.Value}'");
        if (Debt != null && decimal.TryParse(e.Value?.ToString()?.Replace(",", ""), out decimal value))
        {
            Console.WriteLine($"[LoanDataSection] UpdateEscrowPayment - Debt ID: {Debt.DebtId}, Old Value: {Debt.EscrowPayment}, New Value: {value}");
            Debt.EscrowPayment = value;
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateEscrowPayment SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateEscrowPayment ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateEscrowPayment - Failed to parse decimal or Debt is null");
        }
    }

    private async Task UpdateLoanNumber(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateLoanNumber called - Raw Input: '{e.Value}'");
        if (Debt != null)
        {
            Console.WriteLine($"[LoanDataSection] UpdateLoanNumber - Debt ID: {Debt.DebtId}, Old Value: '{Debt.LoanNumber}', New Value: '{e.Value}'");
            Debt.LoanNumber = e.Value?.ToString() ?? "";
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateLoanNumber SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateLoanNumber ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateLoanNumber - Debt is null");
        }
    }

    private async Task UpdateLoanRepresentative(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateLoanRepresentative called - Raw Input: '{e.Value}'");
        if (Debt != null)
        {
            Console.WriteLine($"[LoanDataSection] UpdateLoanRepresentative - Debt ID: {Debt.DebtId}, Old Value: '{Debt.LoanRepresentative}', New Value: '{e.Value}'");
            Debt.LoanRepresentative = e.Value?.ToString() ?? "";
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateLoanRepresentative SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateLoanRepresentative ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateLoanRepresentative - Debt is null");
        }
    }

    private async Task UpdateLenderPhone(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateLenderPhone called - Raw Input: '{e.Value}'");
        if (Debt != null)
        {
            Console.WriteLine($"[LoanDataSection] UpdateLenderPhone - Debt ID: {Debt.DebtId}, Old Value: '{Debt.LenderPhone}', New Value: '{e.Value}'");
            Debt.LenderPhone = e.Value?.ToString() ?? "";
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateLenderPhone SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateLenderPhone ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateLenderPhone - Debt is null");
        }
    }

    private async Task UpdateLenderPhoneExt(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateLenderPhoneExt called - Raw Input: '{e.Value}'");
        if (Debt != null)
        {
            Console.WriteLine($"[LoanDataSection] UpdateLenderPhoneExt - Debt ID: {Debt.DebtId}, Old Value: '{Debt.LenderPhoneExt}', New Value: '{e.Value}'");
            Debt.LenderPhoneExt = e.Value?.ToString() ?? "";
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateLenderPhoneExt SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateLenderPhoneExt ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateLenderPhoneExt - Debt is null");
        }
    }

    private async Task UpdateLenderName(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateLenderName called - Raw Input: '{e.Value}'");
        if (Debt != null)
        {
            Console.WriteLine($"[LoanDataSection] UpdateLenderName - Debt ID: {Debt.DebtId}, Old Value: '{Debt.LenderName}', New Value: '{e.Value}'");
            Debt.LenderName = e.Value?.ToString() ?? "";
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateLenderName SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateLenderName ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateLenderName - Debt is null");
        }
    }

    private async Task UpdateEscrowPaymentDate(ChangeEventArgs e)
    {
        Console.WriteLine($"[LoanDataSection] UpdateEscrowPaymentDate called - Raw Input: '{e.Value}'");
        string inputString = e.Value?.ToString() ?? "";
        if (Debt != null)
        {
            if (string.IsNullOrEmpty(inputString))
            {
                Debt.EscrowPaymentDate = null;
            }
            else if (DateTime.TryParseExact(inputString, "MM/dd/yy", null, System.Globalization.DateTimeStyles.None, out DateTime date))
            {
                Console.WriteLine($"[LoanDataSection] UpdateEscrowPaymentDate - Debt ID: {Debt.DebtId}, Old Value: {Debt.EscrowPaymentDate}, New Value: {date}");
                Debt.EscrowPaymentDate = date;
            }
            else
            {
                Console.WriteLine($"[LoanDataSection] UpdateEscrowPaymentDate - Failed to parse date");
                return;
            }
            
            try
            {
                await DebtService.UpdateDebtAsync(Debt);
                Console.WriteLine($"[LoanDataSection] UpdateEscrowPaymentDate SUCCESS - Debt ID: {Debt.DebtId} updated in database");
                await OnDebtUpdated.InvokeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[LoanDataSection] UpdateEscrowPaymentDate ERROR - Debt ID: {Debt.DebtId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[LoanDataSection] UpdateEscrowPaymentDate - Debt is null");
        }
    }
}

<script src="/js/input-formatting.js"></script>