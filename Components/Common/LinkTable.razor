@using System.Collections.Generic

<div class="link-table" style="width: @Width;">
    <div class="table-header" @onclick="ShowModal">
        <div class="header-title">
            <svg class="collapse-arrow" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
                <path d="M0.5 1C0.5 0.723858 0.723858 0.5 1 0.5H17C17.2761 0.5 17.5 0.723858 17.5 1V17C17.5 17.2761 17.2761 17.5 17 17.5H1C0.723858 17.5 0.5 17.2761 0.5 17V1Z" stroke="#093B5D"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M9.64628 11.817L12.8283 8.63497C13.0235 8.43971 13.3401 8.43971 13.5354 8.63497C13.7306 8.83023 13.7306 9.14682 13.5354 9.34208L10.3534 12.5241C10.1581 12.7193 9.84154 12.7193 9.64628 12.5241C9.45101 12.3288 9.45101 12.0122 9.64628 11.817Z" fill="#093B5D"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M9.6462 5.45341C9.84146 5.25814 10.158 5.25814 10.3533 5.45341L13.5353 8.63539C13.7306 8.83065 13.7306 9.14723 13.5353 9.34249C13.34 9.53776 13.0234 9.53776 12.8282 9.34249L9.6462 6.16051C9.45094 5.96525 9.45094 5.64867 9.6462 5.45341Z" fill="#093B5D"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M4.53544 11.817L7.71742 8.63497C7.91268 8.43971 8.22926 8.43971 8.42452 8.63497C8.61978 8.83023 8.61978 9.14682 8.42452 9.34208L5.24254 12.5241C5.04728 12.7193 4.7307 12.7193 4.53544 12.5241C4.34017 12.3288 4.34017 12.0122 4.53544 11.817Z" fill="#093B5D"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M4.53536 5.45341C4.73062 5.25814 5.04721 5.25814 5.24247 5.45341L8.42445 8.63539C8.61971 8.83065 8.61971 9.14723 8.42445 9.34249C8.22919 9.53776 7.91261 9.53776 7.71734 9.34249L4.53536 6.16051C4.3401 5.96525 4.3401 5.64867 4.53536 5.45341Z" fill="#093B5D"/>
            </svg>
            <span class="title">@Title</span>
        </div>
    </div>

     @if (Data.Any())
     {
         <div class="table-content">
             <div class="table-row header">
                 @foreach (var i in Enumerable.Range(0, Headers.Count))
                 {
                     <div class="table-cell @GetAlignmentClass(i)" style="width: @(ColumnWidths[i] - 16)px">@Headers[i]</div>
                 }
             </div>
             @foreach (var row in Data)
             {
                 <div class="table-row">
                     @foreach (var i in Enumerable.Range(0, row.Count))
                     {
                         <div class="table-cell @GetAlignmentClass(i)" style="width: @(ColumnWidths[i] - 16)px">@row[i]</div>
                     }
                 </div>
             }
         </div>
     }
</div>

@if (showModal)
{
    <div class="modal-overlay" @onclick="HideModal">
        <div class="modal-content" @onclick:stopPropagation="true">
             <div class="modal-header">
                 <span class="modal-title">Select @GetDataTypeDisplayName() tied to this @GetComponentType():</span>
             </div>
            
             <div class="modal-table-container">
                 <div class="table-content">
                     <div class="table-row header">
                         <div class="checkbox-cell" @onclick="ToggleSelectAll">
                             @if (IsAllSelected())
                             {
                                 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                     <rect x="0.25" y="0.25" width="19.5" height="19.5" rx="3.75" fill="white" stroke="#4C4C4F" stroke-width="0.5"/>
                                     <path d="M15.1973 3.34661C14.9929 3.3858 14.7959 3.5013 14.6705 3.68176L8.08603 13.1947L5.03082 10.23C4.71476 9.92059 4.2175 9.92059 3.89828 10.23L2.73941 11.3643C2.4202 11.6736 2.4202 12.1893 2.73941 12.4986L7.40124 17.0617C7.66462 17.3164 8.08603 17.5 8.45476 17.5C8.82349 17.5 9.18906 17.2742 9.42927 16.9328L17.357 5.48638C17.6109 5.12545 17.5182 4.62222 17.1463 4.37783L15.8031 3.47552C15.6187 3.3528 15.4017 3.30846 15.1973 3.34661Z" fill="#5BBA47"/>
                                 </svg>
                             }
                             else
                             {
                                 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                     <rect x="0.25" y="0.25" width="19.5" height="19.5" rx="3.75" fill="white" stroke="#4C4C4F" stroke-width="0.5"/>
                                 </svg>
                             }
                         </div>
                         @foreach (var i in Enumerable.Range(0, Headers.Count))
                         {
                             <div class="table-cell @GetAlignmentClass(i)" style="width: @(ColumnWidths[i] - 16)px">@Headers[i]</div>
                         }
                     </div>
                     @foreach (var (row, index) in (AllData.Any() ? AllData : Data).Select((row, index) => (row, index)))
                     {
                         <div class="table-row">
                             <div class="checkbox-cell" @onclick="() => ToggleSelection(index)">
                                 @if (IsSelected(index))
                                 {
                                     <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                         <rect x="0.25" y="0.25" width="19.5" height="19.5" rx="3.75" fill="white" stroke="#4C4C4F" stroke-width="0.5"/>
                                         <path d="M15.1973 3.34661C14.9929 3.3858 14.7959 3.5013 14.6705 3.68176L8.08603 13.1947L5.03082 10.23C4.71476 9.92059 4.2175 9.92059 3.89828 10.23L2.73941 11.3643C2.4202 11.6736 2.4202 12.1893 2.73941 12.4986L7.40124 17.0617C7.66462 17.3164 8.08603 17.5 8.45476 17.5C8.82349 17.5 9.18906 17.2742 9.42927 16.9328L17.357 5.48638C17.6109 5.12545 17.5182 4.62222 17.1463 4.37783L15.8031 3.47552C15.6187 3.3528 15.4017 3.30846 15.1973 3.34661Z" fill="#5BBA47"/>
                                     </svg>
                                 }
                                 else
                                 {
                                     <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                         <rect x="0.25" y="0.25" width="19.5" height="19.5" rx="3.75" fill="white" stroke="#4C4C4F" stroke-width="0.5"/>
                                     </svg>
                                 }
                             </div>
                             @foreach (var i in Enumerable.Range(0, row.Count))
                             {
                                 <div class="table-cell @GetAlignmentClass(i)" style="width: @(ColumnWidths[i] - 16)px">@row[i]</div>
                             }
                         </div>
                     }
                 </div>
             </div>
            
            <div class="modal-footer">
                <button class="save-exit-button" @onclick="HideModal">Save and Exit</button>
            </div>
        </div>
    </div>
}

<style>
    .link-table {
        margin-bottom: 16px;
    }

    .table-header {
        padding: 8px;
        cursor: pointer;
        background: transparent;
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: 8px;
        width: fit-content;
    }

    .title {
        color: #093B5D;
        font-family: Inter;
        font-size: 16px;
        font-weight: 700;
        line-height: 130%;
        letter-spacing: 0.24px;
    }

    .collapse-arrow {
        /* No animations - arrow always horizontal */
    }

    .table-content {
        padding: 0;
    }

    .table-row {
        display: flex;
        align-items: stretch;
        height: 28px;
    }

    .table-row.header {
        color: #FFF;
        background-color: #093B5D;
        padding: 4px 0;
        font-family: Inter;
        font-size: 16px;
        font-weight: 700;
        line-height: 130%;
        letter-spacing: 0.24px;
    }

    .table-cell {
        padding: 8px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        border-right: 0.25px solid rgba(25, 42, 61, 0.50);
        display: flex;
        align-items: center;
        justify-content: flex-start;
        flex-shrink: 0;
    }

    .table-cell:last-child {
        border-right: none;
    }

    .table-cell.align-left {
        justify-content: flex-start;
    }

    .table-cell.align-center {
        justify-content: center;
    }

    .table-cell.align-right {
        justify-content: flex-end;
    }

    .table-row:not(.header) .table-cell {
        color: #000;
        font-family: Inter;
        font-size: 16px;
        font-weight: 400;
        line-height: 130%;
        letter-spacing: 0.24px;
    }

    .table-row:not(.header) {
        background-color: transparent;
        border-top: 0.25px solid rgba(25, 42, 61, 0.50);
        border-bottom: 0.25px solid rgba(25, 42, 61, 0.50);
        border-left: 0.25px solid rgba(25, 42, 61, 0.50);
        border-right: 0.25px solid rgba(25, 42, 61, 0.50);
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(8px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        border-radius: 8px;
        max-width: 90vw;
        max-height: 90vh;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .modal-header {
        padding: 20px 20px 0 20px;
    }

    .modal-title {
        color: #000;
        font-family: Inter;
        font-size: 18px;
        font-style: normal;
        font-weight: 600;
        line-height: normal;
        letter-spacing: 0.27px;
    }

    .modal-table-container {
        padding: 20px;
        flex: 1;
        overflow: auto;
    }

    .modal-footer {
        padding: 0 20px 20px 20px;
        display: flex;
        justify-content: center;
    }

    .save-exit-button {
        background-color: #0C3B5D;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        font-family: Inter;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .save-exit-button:hover {
        background-color: #093B5D;
    }

    .checkbox-cell {
        display: flex;
        width: 36px;
        padding: 4px 6px;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Width { get; set; } = "574px";
    [Parameter]
    public List<string> Headers { get; set; } = new();

    [Parameter]
    public List<int> ColumnWidths { get; set; } = new();

    [Parameter]
    public List<string> ColumnAlignments { get; set; } = new();

    [Parameter]
    public List<List<string>> Data { get; set; } = new(); // Currently associated items (shown by default)

    [Parameter]
    public List<List<string>> AllData { get; set; } = new(); // All available items (shown in modal)

    [Parameter]
    public string DataType { get; set; } = "loans"; // loans, assets, debts, insurances, incomes, etc.

    [Parameter]
    public EventCallback<List<int>> OnSelectionChanged { get; set; }

    [Parameter]
    public List<int> CurrentlySelected { get; set; } = new();

    private bool showModal { get; set; } = false;
    private List<bool> selectedItems = new();

    private string GetAlignmentClass(int columnIndex)
    {
        if (columnIndex >= ColumnAlignments.Count) return "align-left";
        
        return ColumnAlignments[columnIndex].ToLower() switch
        {
            "right" => "align-right",
            "center" => "align-center",
            _ => "align-left"
        };
    }

    private void ShowModal()
    {
        showModal = true;
    }

    private async void HideModal()
    {
        Console.WriteLine($"[LinkTable] HideModal called - Title: '{Title}', DataType: '{DataType}'");
        
        // Get the selected indices
        var selectedIndices = new List<int>();
        for (int i = 0; i < selectedItems.Count; i++)
        {
            if (selectedItems[i])
            {
                selectedIndices.Add(i);
            }
        }
        
        Console.WriteLine($"[LinkTable] HideModal - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        
        // Notify parent component of selection changes
        Console.WriteLine($"[LinkTable] HideModal - Invoking OnSelectionChanged with {selectedIndices.Count} selected items");
        await OnSelectionChanged.InvokeAsync(selectedIndices);
        Console.WriteLine($"[LinkTable] HideModal - OnSelectionChanged completed");
        
        showModal = false;
    }

    private void ToggleSelection(int index)
    {
        // Ensure the selectedItems list is the right size
        while (selectedItems.Count <= index)
        {
            selectedItems.Add(false);
        }
        
        selectedItems[index] = !selectedItems[index];
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        var dataForModal = AllData.Any() ? AllData : Data;
        var allSelected = IsAllSelected();
        
        for (int i = 0; i < dataForModal.Count; i++)
        {
            if (i >= selectedItems.Count)
            {
                selectedItems.Add(false);
            }
            selectedItems[i] = !allSelected;
        }
        StateHasChanged();
    }

    private bool IsAllSelected()
    {
        var dataForModal = AllData.Any() ? AllData : Data;
        if (dataForModal.Count == 0) return false;
        
        for (int i = 0; i < dataForModal.Count; i++)
        {
            if (i >= selectedItems.Count || !selectedItems[i])
            {
                return false;
            }
        }
        return true;
    }

    private bool IsSelected(int index)
    {
        return index < selectedItems.Count && selectedItems[index];
    }

    private string GetDataTypeDisplayName()
    {
        return DataType.ToLower() switch
        {
            "loans" => "loan(s)",
            "assets" => "asset(s)",
            "debts" => "debt(s)",
            "insurances" => "insurance(s)",
            "incomes" => "income(s)",
            "investments" => "investment(s)",
            "savings" => "saving(s)",
            _ => DataType.ToLower()
        };
    }

    private string GetComponentType()
    {
        // This could be made more dynamic based on context
        return "component";
    }

    protected override void OnParametersSet()
    {
        // Initialize selectedItems list when data changes (use AllData for modal, Data for display)
        var dataForModal = AllData.Any() ? AllData : Data;
        selectedItems = new List<bool>(new bool[dataForModal.Count]);
        
        // Pre-fill checkboxes with previously linked elements
        // CurrentlySelected contains indices of items in AllData that are currently associated
        foreach (var index in CurrentlySelected)
        {
            if (index < selectedItems.Count)
            {
                selectedItems[index] = true;
            }
        }
    }
}
