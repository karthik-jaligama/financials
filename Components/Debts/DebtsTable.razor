@page "/debts"
@rendermode InteractiveServer
@using Financials.Data
@using Financials.Data.Services
@using Financials.Components.Common
@inject DebtService DebtService
@inject AssetService AssetService
@inject InvestmentService InvestmentService
@inject SavingsService SavingsService
@implements IDisposable

<link rel="stylesheet" href="/debts-table.css" />

<div class="horizontal-selector">
    <div class="selector-header-row">
        <div class="selector-header">Cash Flow</div>
        <div class="selector-header">Net Worth</div>
    </div>
    <div class="selector-checkbox-row">
        <input type="checkbox" checked />
        <input type="checkbox" checked />
    </div>
    <div class="selector-checkbox-row">
        <input type="checkbox" />
        <input type="checkbox" checked />
    </div>
    <div class="selector-checkbox-row">
        <input type="checkbox" />
        <input type="checkbox" />
    </div>
    <div class="selector-checkbox-row">
        <input type="checkbox" checked />
        <input type="checkbox" checked />
    </div>
</div>

<div class="debts-container">
    <div class="header">
        <div class="header-content">
            <div class="header-item time">Time</div>
            <div class="header-item owner">Owner</div>
            <div class="header-item balance">Balance</div>
            <div class="header-item pmt-made">Pmt Made</div>
            <div class="header-item rate">Rate</div>
            <div class="header-item term">Term</div>
            <div class="header-item cat">Cat</div>
            <div class="header-item report-description">Report Description</div>
            <div class="header-item as-of">As Of</div>
        </div>
        <div class="select-asset">Select Liability</div>
        <svg xmlns="http://www.w3.org/2000/svg" width="34" height="34" viewBox="0 0 34 34" fill="none">
            <path d="M13.26 10.88H20.74V13.6H13.26V10.88ZM22.1 13.6H29.58V10.88H22.1V13.6ZM4.41998 13.6H11.9V10.88H4.41998V13.6ZM13.26 17.68H20.74V14.96H13.26V17.68ZM22.1 17.68H29.58V14.96H22.1V17.68ZM4.41998 17.68H11.9V14.96H4.41998V17.68ZM22.1 21.76H29.58V19.04H22.1V21.76ZM13.26 21.76H20.74V19.04H13.26V21.76ZM4.41998 21.76H11.9V19.04H4.41998V21.76ZM22.1 25.84H29.58V23.12H22.1V25.84ZM13.26 25.84H20.74V23.12H13.26V25.84ZM4.41998 25.84H11.9V23.12H4.41998V25.84ZM22.1 29.92H29.58V27.2H22.1V29.92ZM13.26 29.92H20.74V27.2H13.26V29.92ZM4.41998 29.92H11.9V27.2H4.41998V29.92ZM4.41998 4.07996V9.51996H29.58V4.07996H4.41998Z" fill="white"/>
        </svg>
    </div>

    <div class="content-container">
        <div class="debts-table">
            @if (debts != null && debts.Any())
            {
                @foreach (var debt in debts)
                {
                <div class="debt-row @(selectedDebt == debt ? "selected" : "")" 
                     @onclick="() => SelectDebt(debt)">
                    <div class="cell time">
                        <CustomDropdown 
                            Value="@debt.Timeframe" 
                            Options="@timeframeOptions" 
                            ValueChanged="@(v => UpdateTimeframe(debt, v))" />
                    </div>
                    <div class="cell owner">
                        <CustomDropdown 
                            Value="@debt.Owner" 
                            Options="@ownerOptions" 
                            ValueChanged="@(v => UpdateOwner(debt, v))" />
                    </div>
                    <div class="cell balance">@(debt.Balance?.ToString("N0") ?? "n/a")</div>
                    <div class="cell pmt-made">@(debt.PaymentMade?.ToString("N0") ?? "n/a")</div>
                    <div class="cell rate">@(debt.InterestRate ?? "n/a")</div>
                    <div class="cell term">@(debt.Term?.ToString() ?? "n/a")</div>
                    <div class="cell cat">
                        <CustomDropdown 
                            Value="@debt.Category" 
                            Options="@categoryOptions" 
                            ValueChanged="@(v => UpdateCategory(debt, v))" />
                    </div>
                    <div class="cell report-description">@(debt.ReportDesc ?? "n/a")</div>
                    <div class="cell as-of">@(debt.BalanceDate?.ToString("MM/dd/yy") ?? "n/a")</div>
                </div>
                }
                <div class="totals-row">
                    <div class="totals-item total-debt">Total Debt @(debts.Sum(d => d.Balance)?.ToString("N0") ?? "0")</div>
                    <div class="totals-item">Pmts Made @(debts.Sum(d => d.PaymentMade)?.ToString("N0") ?? "0")</div>
                    <div class="totals-item">Min Pmt @(debts.Sum(d => d.PaymentMade)?.ToString("N0") ?? "0")</div>
                    <div class="totals-item">Ann'l Interest @(CalculateAnnualInterest().ToString("N0"))</div>
                    <div class="totals-item">Avg Rate @(CalculateWeightedAverageRate().ToString("0.00"))%</div>
                </div>
            }
            else
            {
                <div style="padding: 20px; text-align: center; color: #666;">
                    <p>No debts found. Please check your database connection or initialize the database.</p>
                </div>
            }
        </div>
        
        <div class="scrollable-section">
            @if (selectedDebt != null)
            {
                <Notes Note="@selectedDebt.Notes" Width="575px" />
                
                <LoanDataSection Debt="@selectedDebt" />

                <div style="margin: 30px;"><AddressSection/></div>

                <AdjustableLoanSection Debt="@selectedDebt" />

                <div style="margin-top: 30px; margin-left: 30px;">
                    <LinkTable 
                        Title="Associated Assets"
                        DataType="assets"
                        Headers='new List<string> { "Own", "Value", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 60, 100, 120, 200, 94 }'
                        ColumnAlignments='new List<string> { "center", "right", "left", "left", "center" }'
                        Data='allAssociatedAssets'
                        AllData='allAvailableAssets'
                        CurrentlySelected='GetCurrentlySelectedAssetIndices()'
                        OnSelectionChanged='OnAssetsSelectionChanged'
                    />
                </div>
                <div style="margin-left: 30px;">
                    <LinkTable 
                        Title="Associated Income"
                        DataType="incomes"
                        Headers='new List<string> { "Annual", "Monthly", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 90, 100, 120, 170, 94 }'
                        ColumnAlignments='new List<string> { "right", "right", "left", "left", "center" }'
                        Data='allAssociatedIncomes'
                        AllData='allAvailableIncomes'
                        CurrentlySelected='GetCurrentlySelectedIncomeIndices()'
                        OnSelectionChanged='OnIncomesSelectionChanged'
                    />
                </div>
                <div style="margin-left: 30px;">
                    <LinkTable 
                        Title="Associated Insurance"
                        DataType="insurances"
                        Headers='new List<string> { "Own", "Value", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 60, 100, 120, 200, 94 }'
                        ColumnAlignments='new List<string> { "center", "right", "left", "left", "right" }'
                        Data='allAssociatedInsurances'
                        AllData='allAvailableInsurances'
                        CurrentlySelected='GetCurrentlySelectedInsuranceIndices()'
                        OnSelectionChanged='OnInsurancesSelectionChanged'
                    />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Debt> debts = new();
    private Debt? selectedDebt;
    private List<string> timeframeOptions = new() { "NOW", "PAST", "FUTR" };
    private List<string> ownerOptions = new() { "JT", "C1", "C2", "TR", "LLC", "??" };
    private List<string> categoryOptions = new() 
    { 
        "RE", 
        "CC",
        "PL",
        "AL",
        "OL"
    };
    private string componentKey = Guid.NewGuid().ToString();

    // Data sources for LinkTable components
    private List<List<string>> allAssociatedAssets = new();
    private List<List<string>> allAssociatedIncomes = new();
    private List<List<string>> allAssociatedInsurances = new();
    
    // All available data for selection
    private List<List<string>> allAvailableAssets = new();
    private List<List<string>> allAvailableIncomes = new();
    private List<List<string>> allAvailableInsurances = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            debts = await DebtService.GetDebtsAsync();
            selectedDebt = debts.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading debts: {ex.Message}");
            debts = new List<Debt>();
            selectedDebt = null;
        }
        
        // Initialize data from database services for LinkTable components
        try
        {
            var assets = await AssetService.GetAssetsAsync();
            var investments = await InvestmentService.GetInvestmentsAsync();
            var savings = await SavingsService.GetSavingsAsync();
        
        // All available assets (for selection modal)
        allAvailableAssets = assets.Select(a => new List<string> 
        { 
            a.Owner ?? "", 
            a.Value.ToString("N0"), 
            a.Category ?? "", 
            a.ReportDesc ?? "", 
            a.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
        // All available incomes (for selection modal)
        allAvailableIncomes = investments.Select(i => new List<string> 
        { 
            i.CurrentValue?.ToString("N0") ?? "0", 
            ((i.CurrentValue ?? 0) / 12).ToString("N0"), 
            i.AccountType ?? "Investment", 
            i.ReportDesc ?? "n/a", 
            i.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).Concat(savings.Select(s => new List<string> 
        { 
            s.Value.ToString("N0"), 
            (s.Value / 12).ToString("N0"), 
            s.Category, 
            s.ReportDesc, 
            s.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        })).ToList();
        
        // All available insurances (for selection modal)
        allAvailableInsurances = assets.Select(a => new List<string> 
        { 
            a.Owner ?? "", 
            a.Value.ToString("N0"), 
            "Insurance", 
            a.ReportDesc ?? "", 
            a.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
            // Load associated items for the first debt
            if (selectedDebt != null)
            {
                LoadAssociatedItemsForDebt(selectedDebt);
            }
            else
            {
                // Initially, no items are associated (empty lists)
                allAssociatedAssets = new List<List<string>>();
                allAssociatedIncomes = new List<List<string>>();
                allAssociatedInsurances = new List<List<string>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading additional data: {ex.Message}");
            // Initialize with empty lists if there's an error
            allAvailableAssets = new List<List<string>>();
            allAvailableIncomes = new List<List<string>>();
            allAvailableInsurances = new List<List<string>>();
            allAssociatedAssets = new List<List<string>>();
            allAssociatedIncomes = new List<List<string>>();
            allAssociatedInsurances = new List<List<string>>();
        }
    }

    private async Task UpdateTimeframe(Debt debt, string value)
    {
        Console.WriteLine($"[DebtsTable] UpdateTimeframe called - Debt ID: {debt.DebtId}, Old Value: '{debt.Timeframe}', New Value: '{value}'");
        debt.Timeframe = value;
        try
        {
            await DebtService.UpdateDebtAsync(debt);
            Console.WriteLine($"[DebtsTable] UpdateTimeframe SUCCESS - Debt ID: {debt.DebtId} updated in database");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DebtsTable] UpdateTimeframe ERROR - Debt ID: {debt.DebtId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateOwner(Debt debt, string value)
    {
        Console.WriteLine($"[DebtsTable] UpdateOwner called - Debt ID: {debt.DebtId}, Old Value: '{debt.Owner}', New Value: '{value}'");
        debt.Owner = value;
        try
        {
            await DebtService.UpdateDebtAsync(debt);
            Console.WriteLine($"[DebtsTable] UpdateOwner SUCCESS - Debt ID: {debt.DebtId} updated in database");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DebtsTable] UpdateOwner ERROR - Debt ID: {debt.DebtId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateCategory(Debt debt, string value)
    {
        Console.WriteLine($"[DebtsTable] UpdateCategory called - Debt ID: {debt.DebtId}, Old Value: '{debt.Category}', New Value: '{value}'");
        debt.Category = value;
        try
        {
            await DebtService.UpdateDebtAsync(debt);
            Console.WriteLine($"[DebtsTable] UpdateCategory SUCCESS - Debt ID: {debt.DebtId} updated in database");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DebtsTable] UpdateCategory ERROR - Debt ID: {debt.DebtId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private void SelectDebt(Debt debt)
    {
        selectedDebt = debt;
        
        // Load associated items for the selected debt
        LoadAssociatedItemsForDebt(debt);
    }

    private void LoadAssociatedItemsForDebt(Debt debt)
    {
        // Load associated assets
        allAssociatedAssets = debt.AssociatedAssets
            .Where(index => index < allAvailableAssets.Count)
            .Select(index => allAvailableAssets[index])
            .ToList();
            
        // Load associated incomes
        allAssociatedIncomes = debt.AssociatedIncomes
            .Where(index => index < allAvailableIncomes.Count)
            .Select(index => allAvailableIncomes[index])
            .ToList();
            
        // Load associated insurances
        allAssociatedInsurances = debt.AssociatedInsurances
            .Where(index => index < allAvailableInsurances.Count)
            .Select(index => allAvailableInsurances[index])
            .ToList();
    }


    private double CalculateWeightedAverageRate()
    {
        if (debts == null || !debts.Any()) return 0;
        
        var totalBalance = debts.Sum(d => d.Balance ?? 0);
        if (totalBalance == 0) return 0;

        var weightedSum = debts.Sum(d => {
            var rate = decimal.TryParse(d.InterestRate?.TrimEnd('%'), out var r) ? r : 0m;
            return (d.Balance ?? 0) * rate;
        });

        return (double)(weightedSum / totalBalance);
    }

    private double CalculateAnnualInterest()
    {
        if (debts == null || !debts.Any()) return 0;
        
        return debts.Sum(d => {
            var rate = decimal.TryParse(d.InterestRate?.TrimEnd('%'), out var r) ? r : 0m;
            return (double)((d.Balance ?? 0) * rate / 100);
        });
    }

    private async Task OnAssetsSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[DebtsTable] OnAssetsSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated assets based on selection
        allAssociatedAssets = selectedIndices
            .Where(index => index < allAvailableAssets.Count)
            .Select(index => allAvailableAssets[index])
            .ToList();
        
        // Update the selected debt's associated assets
        if (selectedDebt != null)
        {
            Console.WriteLine($"[DebtsTable] OnAssetsSelectionChanged - Updating Debt ID: {selectedDebt.DebtId} with {selectedIndices.Count} associated assets");
            selectedDebt.AssociatedAssets = selectedIndices.ToList();
            try
            {
                await DebtService.UpdateDebtAsync(selectedDebt);
                Console.WriteLine($"[DebtsTable] OnAssetsSelectionChanged SUCCESS - Debt ID: {selectedDebt.DebtId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[DebtsTable] OnAssetsSelectionChanged ERROR - Debt ID: {selectedDebt.DebtId}, Error: {ex.Message}");
            }
        }
        
        StateHasChanged();
    }

    private async Task OnIncomesSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[DebtsTable] OnIncomesSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated incomes based on selection
        allAssociatedIncomes = selectedIndices
            .Where(index => index < allAvailableIncomes.Count)
            .Select(index => allAvailableIncomes[index])
            .ToList();
        
        // Update the selected debt's associated incomes
        if (selectedDebt != null)
        {
            Console.WriteLine($"[DebtsTable] OnIncomesSelectionChanged - Updating Debt ID: {selectedDebt.DebtId} with {selectedIndices.Count} associated incomes");
            selectedDebt.AssociatedIncomes = selectedIndices.ToList();
            try
            {
                await DebtService.UpdateDebtAsync(selectedDebt);
                Console.WriteLine($"[DebtsTable] OnIncomesSelectionChanged SUCCESS - Debt ID: {selectedDebt.DebtId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[DebtsTable] OnIncomesSelectionChanged ERROR - Debt ID: {selectedDebt.DebtId}, Error: {ex.Message}");
            }
        }
        
        StateHasChanged();
    }

    private async Task OnInsurancesSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[DebtsTable] OnInsurancesSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated insurances based on selection
        allAssociatedInsurances = selectedIndices
            .Where(index => index < allAvailableInsurances.Count)
            .Select(index => allAvailableInsurances[index])
            .ToList();
        
        // Update the selected debt's associated insurances
        if (selectedDebt != null)
        {
            Console.WriteLine($"[DebtsTable] OnInsurancesSelectionChanged - Updating Debt ID: {selectedDebt.DebtId} with {selectedIndices.Count} associated insurances");
            selectedDebt.AssociatedInsurances = selectedIndices.ToList();
            try
            {
                await DebtService.UpdateDebtAsync(selectedDebt);
                Console.WriteLine($"[DebtsTable] OnInsurancesSelectionChanged SUCCESS - Debt ID: {selectedDebt.DebtId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[DebtsTable] OnInsurancesSelectionChanged ERROR - Debt ID: {selectedDebt.DebtId}, Error: {ex.Message}");
            }
        }
        
        StateHasChanged();
    }

    private List<int> GetCurrentlySelectedAssetIndices()
    {
        if (selectedDebt == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var assetIndex in selectedDebt.AssociatedAssets)
        {
            if (assetIndex < allAvailableAssets.Count)
            {
                indices.Add(assetIndex);
            }
        }
        return indices;
    }

    private List<int> GetCurrentlySelectedIncomeIndices()
    {
        if (selectedDebt == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var incomeIndex in selectedDebt.AssociatedIncomes)
        {
            if (incomeIndex < allAvailableIncomes.Count)
            {
                indices.Add(incomeIndex);
            }
        }
        return indices;
    }

    private List<int> GetCurrentlySelectedInsuranceIndices()
    {
        if (selectedDebt == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var insuranceIndex in selectedDebt.AssociatedInsurances)
        {
            if (insuranceIndex < allAvailableInsurances.Count)
            {
                indices.Add(insuranceIndex);
            }
        }
        return indices;
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
} 