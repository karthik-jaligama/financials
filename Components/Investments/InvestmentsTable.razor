@page "/investments"
@rendermode InteractiveServer
@using Financials.Data
@using Financials.Data.Services
@using Financials.Data.Classes
@using Financials.Components.Common
@inject InvestmentService InvestmentService
@inject DebtService DebtService
@inject AssetService AssetService
@inject SavingsService SavingsService
@inject IJSRuntime JSRuntime
@implements IDisposable

<link rel="stylesheet" href="/investments-table.css" />


<div class="investments-container">
    <div class="header">
        <div class="header-content">
            <div class="header-item time">Time</div>
            <div class="header-item owner">Owner</div>
            <div class="header-item value">Value</div>
            <div class="header-item acct-type">Acct Type</div>
            <div class="header-item report-description">Report Description</div>
            <div class="header-item as-of">As Of</div>
        </div>
        <div class="select-asset">Select Investment</div>
        <svg xmlns="http://www.w3.org/2000/svg" width="34" height="34" viewBox="0 0 34 34" fill="none">
            <path d="M13.26 10.88H20.74V13.6H13.26V10.88ZM22.1 13.6H29.58V10.88H22.1V13.6ZM4.41998 13.6H11.9V10.88H4.41998V13.6ZM13.26 17.68H20.74V14.96H13.26V17.68ZM22.1 17.68H29.58V14.96H22.1V17.68ZM4.41998 17.68H11.9V14.96H4.41998V17.68ZM22.1 21.76H29.58V19.04H22.1V21.76ZM13.26 21.76H20.74V19.04H13.26V21.76ZM4.41998 21.76H11.9V19.04H4.41998V21.76ZM22.1 25.84H29.58V23.12H22.1V25.84ZM13.26 25.84H20.74V23.12H13.26V25.84ZM4.41998 25.84H11.9V23.12H4.41998V25.84ZM22.1 29.92H29.58V27.2H22.1V29.92ZM13.26 29.92H20.74V27.2H13.26V29.92ZM4.41998 29.92H11.9V27.2H4.41998V29.92ZM4.41998 4.07996V9.51996H29.58V4.07996H4.41998Z" fill="white"/>
        </svg>
    </div>

    <div class="content-container">
        <div class="investments-table">
            @foreach (var investment in investments)
            {
                <div class="investment-row @(selectedInvestment == investment ? "selected" : "")" 
                     @key="investment.InvestmentId"
                     @onclick="() => SelectInvestment(investment)">
                    <div class="cell time">
                        <CustomDropdown 
                            Value="@investment.Timeframe" 
                            Options="@timeframeOptions" 
                            ValueChanged="@(v => UpdateTimeframe(investment, v))" />
                    </div>
                    <div class="cell owner">
                        <CustomDropdown 
                            Value="@investment.Owner" 
                            Options="@ownerOptions" 
                            ValueChanged="@(v => UpdateOwner(investment, v))" />
                    </div>
                    <div class="cell value">
                        <input type="text" 
                               class="editable-cell" 
                               value="@(investment.CurrentValue?.ToString("N0") ?? "")" 
                               @onchange="@(async (e) => await UpdateCurrentValue(investment, e))" />
                    </div>
                    <div class="cell acct-type">
                        <CustomDropdown 
                            Value="@investment.AccountType" 
                            Options="@accountTypeOptions" 
                            ValueChanged="@(v => UpdateAccountTypeDropdown(investment, v))" />
                    </div>
                    <div class="cell report-description">
                        <input type="text" 
                               class="editable-cell" 
                               value="@(investment.ReportDesc ?? "")" 
                               @onchange="@(async (e) => await UpdateReportDesc(investment, e))" />
                        @if (!string.IsNullOrEmpty(investment.ReportHoverNote))
                        {
                            <span class="hover-note-wrapper">
                                <svg class="hover-note-icon" xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M2.19996 4.84001C2.19996 3.38165 3.3816 2.20001 4.83996 2.20001H17.16C18.6183 2.20001 19.8 3.38165 19.8 4.84001V14.96C19.8 15.0769 19.7536 15.1886 19.6711 15.2711L15.2711 19.6711C15.1886 19.7536 15.0768 19.8 14.96 19.8H4.83995C3.38159 19.8 2.19995 18.6184 2.19995 17.16L2.19996 4.84001ZM4.83996 3.08001C3.868 3.08001 3.07996 3.86805 3.07996 4.84001V17.16C3.07996 18.132 3.868 18.92 4.83996 18.92H14.52V17.16C14.52 15.7017 15.7016 14.52 17.16 14.52H18.92V4.84001C18.92 3.86805 18.1319 3.08001 17.16 3.08001H4.83996ZM18.2978 15.4H17.16C16.188 15.4 15.4 16.1881 15.4 17.16V18.2978L18.2978 15.4Z" fill="black"/>
                                </svg>
                                <span class="hover-note-tooltip">@investment.ReportHoverNote</span>
                            </span>
                        }
                    </div>
                    <div class="cell as-of">
                        <input type="text" 
                               class="editable-cell date-input" 
                               value="@(investment.ValueDate?.ToString("MM/dd/yy") ?? "")" 
                               placeholder="mm/dd/yy"
                               @onchange="@(async (e) => await UpdateValueDate(investment, e))" />
                    </div>
                </div>
            }
            <div class="totals-row">
                <div class="total-item">
                    <span class="total-label">Total</span>
                    <span class="total-value">@(investments.Sum(i => i.CurrentValue)?.ToString("N0") ?? "0")</span>
                </div>
                @foreach (var owner in investments.Select(i => i.Owner).Distinct().Where(o => !string.IsNullOrEmpty(o)).OrderBy(o => o))
                {
                    <div class="owner-total-item">
                        <span class="owner-label">@owner)</span>
                        <span class="owner-value">@(investments.Where(i => i.Owner == owner).Sum(i => i.CurrentValue)?.ToString("N0") ?? "0")</span>
                    </div>
                }
            </div>
        </div>
        
        <div class="scrollable-section">
            @if (selectedInvestment != null)
            {
                <Notes Note="@selectedInvestment.Notes" Width="708px" />
                
                <div class="investment-firm-section">
                    <div class="firm-input-container">
                        <input type="text" class="firm-input" placeholder="Enter Investment Firm" value="@(selectedInvestment?.Firm ?? "")" @oninput="@(async (e) => await UpdateFirm(e))" />
                        <div class="checkbox-container">
                            <input type="checkbox" class="outside-investment-checkbox" checked="@(selectedInvestment?.Outside ?? false)" @onchange="@(async (e) => await UpdateOutside(e))" />
                            <span class="checkbox-label">(Outside Investment)</span>
                        </div>
                    </div>
                </div>

                <div class="sum-total-section">
                    @if (IsBasisPanel(selectedInvestment?.AccountType))
                    {
                        <!-- Basis Panel -->
                        <div class="simple-panel-container">
                            <div class="breakdown-item">
                                <span class="breakdown-label">Basis</span>
                                <input type="text" 
                                       class="breakdown-input" 
                                       value="@(selectedInvestment?.CostBasis?.ToString("N0") ?? "0")" 
                                       @oninput="HandleNumberInput"
                                       @onchange="@(async (e) => await UpdateCostBasis(e))" 
                                       @onblur="HandleInputBlur" />
                            </div>
                            <span class="helper-text">(If less than current value)</span>
                        </div>
                    }
                    else if (IsIRAPanel(selectedInvestment?.AccountType))
                    {
                        <!-- IRA Version Panel -->
                        <div class="simple-panel-container">
                            <div class="breakdown-item">
                                <span class="breakdown-label">Tax-Paid</span>
                                <input type="text" 
                                       class="breakdown-input" 
                                       value="@(taxPaidDecimal?.ToString("N0") ?? "0")" 
                                       @oninput="HandleNumberInput"
                                       @onchange="@(async (e) => await UpdateTaxPaidValueFromInput(e))" 
                                       @onblur="HandleInputBlur" />
                            </div>
                            <span class="helper-text">After-tax Contributions (If Applicable)</span>
                        </div>
                    }
                    else
                    {
                        <!-- Retirement Plan Panel (current full breakdown) -->
                        <div class="sum-total-container">
                            <div class="breakdown-item sum-total-item">
                                <span class="breakdown-label">Sum Total</span>
                                <input type="text" class="breakdown-input sum-total-input" value="@sumTotal.ToString("N0")" readonly />
                            </div>
                            <span class="equals"></span>
                            <div class="equation-breakdown">
                                <div class="breakdown-item">
                                    <span class="breakdown-label">Pre-tax</span>
                                    <input type="text" 
                                           class="breakdown-input" 
                                           value="@(preTaxDecimal?.ToString("N0") ?? "0")" 
                                           @oninput="HandleNumberInput"
                                           @onchange="@(async (e) => await UpdatePreTaxValueFromInput(e))" 
                                           @onblur="HandleInputBlur" />
                                </div>
                                <span class="plus"></span>
                                <div class="breakdown-item">
                                    <span class="breakdown-label">Roth</span>
                                    <input type="text" 
                                           class="breakdown-input" 
                                           value="@(rothDecimal?.ToString("N0") ?? "0")" 
                                           @oninput="HandleNumberInput"
                                           @onchange="@(async (e) => await UpdateRothValueFromInput(e))" 
                                           @onblur="HandleInputBlur" />
                                </div>
                                <span class="plus"></span>
                                <div class="breakdown-item">
                                    <span class="breakdown-label">After-tax</span>
                                    <input type="text" 
                                           class="breakdown-input" 
                                           value="@(afterTaxDecimal?.ToString("N0") ?? "0")" 
                                           @oninput="HandleNumberInput"
                                           @onchange="@(async (e) => await UpdateAfterTaxValueFromInput(e))" 
                                           @onblur="HandleInputBlur" />
                                </div>
                                <div class="breakdown-item">
                                    <span class="breakdown-label tax-paid-label">Tax-Paid</span>
                                    <input type="text" 
                                           class="breakdown-input tax-paid" 
                                           value="@(taxPaidDecimal?.ToString("N0") ?? "0")" 
                                           @oninput="HandleNumberInput"
                                           @onchange="@(async (e) => await UpdateTaxPaidValueFromInput(e))" 
                                           @onblur="HandleInputBlur" />
                                </div>
                            </div>
                        </div>
                    }
                </div>


                <div style="margin-top: 30px; margin-left: 30px;">
                    <LinkTable 
                        Title="Associated Loans"
                        DataType="debts"
                        Width="728px"
                        Headers='new List<string> { "Balance", "Pmt Made", "Rate", "Term", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 115, 100, 84, 84, 250, 94 }'
                        ColumnAlignments='new List<string> { "right", "right", "right", "center", "left", "center" }'
                        Data='allAssociatedDebts'
                        AllData='allAvailableDebts'
                        CurrentlySelected='GetCurrentlySelectedDebtIndices()'
                        OnSelectionChanged='OnDebtsSelectionChanged'
                    />
                </div>
                <div style="margin-left: 30px;">
                    <LinkTable 
                        Title="Associated Income"
                        DataType="incomes"
                        Width="664px"
                        Headers='new List<string> { "Annual", "Monthly", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 100, 100, 120, 250, 94 }'
                        ColumnAlignments='new List<string> { "right", "right", "left", "left", "center" }'
                        Data='allAssociatedIncomes'
                        AllData='allAvailableIncomes'
                        CurrentlySelected='GetCurrentlySelectedIncomeIndices()'
                        OnSelectionChanged='OnIncomesSelectionChanged'
                    />
                </div>
                <div style="margin-left: 30px;">
                    <LinkTable 
                        Title="Associated Insurance"
                        DataType="insurances"
                        Width="664px"
                        Headers='new List<string> { "Own", "Value", "Category", "Report Description", "As Of" }'
                        ColumnWidths='new List<int> { 100, 100, 120, 250, 94 }'
                        ColumnAlignments='new List<string> { "right", "right", "left", "left", "center" }'
                        Data='allAssociatedInsurances'
                        AllData='allAvailableInsurances'
                        CurrentlySelected='GetCurrentlySelectedInsuranceIndices()'
                        OnSelectionChanged='OnInsurancesSelectionChanged'
                    />
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Investment> investments = new();
    private Investment? selectedInvestment;
    private List<string> timeframeOptions = new() { "NOW", "PAST", "FUTR" };
    private List<string> ownerOptions = new() { "JT", "C1", "C2", "TR", "LLC", "??" };
    private List<string> categoryOptions = new() 
    { 
        "401K", 
        "403B",
        "IRA",
        "Roth IRA",
        "Brokerage",
        "CD",
        "Bond",
        "Mutual Fund",
        "ETF",
        "Stock",
        "Crypto",
        "Other"
    };
    
    private List<string> accountTypeOptions = new()
    {
        "Checking",
        "Savings",
        "Brokerage",
        "IRA",
        "Roth",
        "Inherited IRA",
        "Inherited Roth",
        "401k",
        "Solo 401k",
        "403b",
        "457b",
        "SEP",
        "SIMPLE",
        "Deferred Comp",
        "Qual Annuity",
        "NonQual Annuity",
        "Living Trust",
        "529 College",
        "UTMA, UGMA",
        "Donor Advised",
        "Profit-Sharing",
        "ESPP",
        "ESOP",
        "H.S.A.",
        "Pension Plan"
    };
    
    private string componentKey = Guid.NewGuid().ToString();
    
    // Sum total breakdown values
    private decimal? preTaxDecimal;
    private decimal? rothDecimal;
    private decimal? afterTaxDecimal;
    private decimal? taxPaidDecimal;
    
    private decimal sumTotal => CalculateSumTotal();

    // Data sources for LinkTable components
    private List<List<string>> allAssociatedDebts = new();
    private List<List<string>> allAssociatedIncomes = new();
    private List<List<string>> allAssociatedInsurances = new();
    
    // All available data for selection
    private List<List<string>> allAvailableDebts = new();
    private List<List<string>> allAvailableIncomes = new();
    private List<List<string>> allAvailableInsurances = new();

    protected override async Task OnInitializedAsync()
    {
        investments = await InvestmentService.GetInvestmentsAsync();
        selectedInvestment = investments.FirstOrDefault();
        
        // Initialize data from database services for LinkTable components
        var debts = await DebtService.GetDebtsAsync();
        var assets = await AssetService.GetAssetsAsync();
        var savings = await SavingsService.GetSavingsAsync();
        
        // All available debts (for selection modal)
        allAvailableDebts = debts.Select(d => new List<string> 
        { 
            d.Balance?.ToString("N0") ?? "0", 
            d.PaymentMade?.ToString("N0") ?? "0", 
            d.InterestRate ?? "n/a", 
            d.Term?.ToString() ?? "n/a", 
            d.ReportDesc ?? "n/a", 
            d.BalanceDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
        // All available incomes (using investments and savings as income sources)
        allAvailableIncomes = investments.Select(i => new List<string> 
        { 
            i.CurrentValue?.ToString("N0") ?? "0", 
            ((i.CurrentValue ?? 0) / 12).ToString("N0"), 
            i.AccountType ?? "Investment", 
            i.ReportDesc ?? "n/a", 
            i.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).Concat(savings.Select(s => new List<string> 
        { 
            s.Value.ToString("N0"), 
            (s.Value / 12).ToString("N0"), 
            s.Category, 
            s.ReportDesc, 
            s.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        })).ToList();
        
        // All available insurances (using assets as proxy)
        allAvailableInsurances = assets.Select(a => new List<string> 
        { 
            a.Owner ?? "", 
            a.Value.ToString("N0"), 
            "Insurance", 
            a.ReportDesc ?? "", 
            a.ValueDate?.ToString("MM/dd/yy") ?? "n/a" 
        }).ToList();
        
        // Load associated items for the first investment
        if (selectedInvestment != null)
        {
            LoadBreakdownValuesFromInvestment(selectedInvestment);
            LoadAssociatedItemsForInvestment(selectedInvestment);
        }
        else
        {
            // Initially, no items are associated (empty lists)
            allAssociatedDebts = new List<List<string>>();
            allAssociatedIncomes = new List<List<string>>();
            allAssociatedInsurances = new List<List<string>>();
        }
    }

    private async Task ReloadInvestments()
    {
        // Reload investments from database to ensure all changes (including hover notes) are reflected
        if (selectedInvestment != null)
        {
            var selectedInvestmentId = selectedInvestment.InvestmentId;
            investments = await InvestmentService.GetInvestmentsAsync();
            selectedInvestment = investments.FirstOrDefault(i => i.InvestmentId == selectedInvestmentId);
        }
    }

    private async Task UpdateTimeframe(Investment investment, string value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateTimeframe called - Investment ID: {investment.InvestmentId}, Old Value: '{investment.Timeframe}', New Value: '{value}'");
        investment.Timeframe = value;
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateTimeframe SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateTimeframe ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateOwner(Investment investment, string value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateOwner called - Investment ID: {investment.InvestmentId}, Old Value: '{investment.Owner}', New Value: '{value}'");
        investment.Owner = value;
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateOwner SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateOwner ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateCategory(Investment investment, string value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateCategory called - Investment ID: {investment.InvestmentId}, Old Value: '{investment.Category}', New Value: '{value}'");
        investment.Category = value;
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateCategory SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateCategory ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateCurrentValue(Investment investment, ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateCurrentValue called - Investment ID: {investment.InvestmentId}, Raw Input: '{e.Value}'");
        
        string inputString = e.Value?.ToString() ?? "";
        if (string.IsNullOrEmpty(inputString))
        {
            investment.CurrentValue = null;
        }
        else
        {
            // Try parsing with different methods
            bool parseSuccess = decimal.TryParse(inputString, out decimal value);
            if (!parseSuccess)
            {
                // Try removing commas and parsing again
                string cleanInput = inputString.Replace(",", "").Replace("$", "").Trim();
                parseSuccess = decimal.TryParse(cleanInput, out value);
            }
            
            if (parseSuccess)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateCurrentValue - Investment ID: {investment.InvestmentId}, Old Value: {investment.CurrentValue}, New Value: {value}");
                investment.CurrentValue = value;
            }
            else
            {
                Console.WriteLine($"[InvestmentsTable] UpdateCurrentValue - Failed to parse decimal value");
                return;
            }
        }
        
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateCurrentValue SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateCurrentValue ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateAccountTypeDropdown(Investment investment, string value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateAccountTypeDropdown called - Investment ID: {investment.InvestmentId}, Old Value: '{investment.AccountType}', New Value: '{value}'");
        investment.AccountType = value;
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateAccountTypeDropdown SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateAccountTypeDropdown ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateAccountType(Investment investment, ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateAccountType called - Investment ID: {investment.InvestmentId}, Old Value: '{investment.AccountType}', New Value: '{e.Value}'");
        investment.AccountType = e.Value?.ToString() ?? "";
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateAccountType SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateAccountType ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }
    
    // Helper methods to determine which panel to display
    private bool IsBasisPanel(string? accountType)
    {
        if (string.IsNullOrEmpty(accountType)) return false;
        
        var basisTypes = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "Checking", "Savings", "Brokerage", "Roth", "Inherited Roth",
            "Qual Annuity", "NonQual Annuity", "Living Trust", "529 College",
            "UTMA, UGMA", "Donor Advised", "ESPP", "ESOP", "H.S.A."
        };
        
        return basisTypes.Contains(accountType);
    }
    
    private bool IsIRAPanel(string? accountType)
    {
        if (string.IsNullOrEmpty(accountType)) return false;
        
        return accountType.Equals("IRA", StringComparison.OrdinalIgnoreCase) ||
               accountType.Equals("Inherited IRA", StringComparison.OrdinalIgnoreCase);
    }
    
    private async Task UpdateCostBasis(ChangeEventArgs e)
    {
        if (selectedInvestment == null) return;
        
        string inputString = e.Value?.ToString() ?? "";
        string cleanInput = inputString.Replace(",", "").Replace("$", "").Trim();
        
        if (decimal.TryParse(cleanInput, out decimal value))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateCostBasis - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.CostBasis}, New Value: {value}");
            selectedInvestment.CostBasis = value;
            
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateCostBasis SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
                await ReloadInvestments();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateCostBasis ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateCostBasis - Failed to parse decimal value");
        }
    }

    private async Task UpdateReportDesc(Investment investment, ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateReportDesc called - Investment ID: {investment.InvestmentId}, Old Value: '{investment.ReportDesc}', New Value: '{e.Value}'");
        investment.ReportDesc = e.Value?.ToString() ?? "";
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateReportDesc SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateReportDesc ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateValueDate(Investment investment, ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateValueDate called - Investment ID: {investment.InvestmentId}, Raw Input: '{e.Value}'");
        
        string inputString = e.Value?.ToString() ?? "";
        if (string.IsNullOrEmpty(inputString))
        {
            investment.ValueDate = null;
        }
        else if (DateTime.TryParseExact(inputString, "MM/dd/yy", null, System.Globalization.DateTimeStyles.None, out DateTime valueDate))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateValueDate - Investment ID: {investment.InvestmentId}, Old Value: {investment.ValueDate}, New Value: {valueDate}");
            investment.ValueDate = valueDate;
        }
        else if (DateTime.TryParse(inputString, out valueDate))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateValueDate - Investment ID: {investment.InvestmentId}, Old Value: {investment.ValueDate}, New Value: {valueDate} (fallback parse)");
            investment.ValueDate = valueDate;
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateValueDate - Failed to parse date value");
            return;
        }
        
        try
        {
            await InvestmentService.UpdateInvestmentAsync(investment);
            Console.WriteLine($"[InvestmentsTable] UpdateValueDate SUCCESS - Investment ID: {investment.InvestmentId} updated in database");
            await ReloadInvestments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateValueDate ERROR - Investment ID: {investment.InvestmentId}, Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private void SelectInvestment(Investment investment)
    {
        selectedInvestment = investment;
        
        // Load the breakdown values from the investment
        LoadBreakdownValuesFromInvestment(investment);
        
        // Load associated items for the selected investment
        LoadAssociatedItemsForInvestment(investment);
    }

    private void LoadBreakdownValuesFromInvestment(Investment investment)
    {
        preTaxDecimal = investment.PreTax;
        rothDecimal = investment.Roth;
        afterTaxDecimal = investment.AfterTax;
        taxPaidDecimal = investment.TaxPaid;
    }

    private void LoadAssociatedItemsForInvestment(Investment investment)
    {
        // Load associated debts
        allAssociatedDebts = investment.AssociatedDebts
            .Where(index => index < allAvailableDebts.Count)
            .Select(index => allAvailableDebts[index])
            .ToList();
            
        // Load associated incomes
        allAssociatedIncomes = investment.AssociatedIncomes
            .Where(index => index < allAvailableIncomes.Count)
            .Select(index => allAvailableIncomes[index])
            .ToList();
            
        // Load associated insurances
        allAssociatedInsurances = investment.AssociatedInsurances
            .Where(index => index < allAvailableInsurances.Count)
            .Select(index => allAvailableInsurances[index])
            .ToList();
    }

    private string GetGainLossClass(decimal? gainLoss)
    {
        if (gainLoss == null) return "";
        return gainLoss >= 0 ? "gain" : "loss";
    }
    
    private decimal CalculateSumTotal()
    {
        var preTax = preTaxDecimal ?? 0;
        var roth = rothDecimal ?? 0;
        var afterTax = afterTaxDecimal ?? 0;
        var taxPaid = taxPaidDecimal ?? 0;
        
        return preTax + roth + afterTax - taxPaid;
    }

    private async Task UpdatePreTaxValue(decimal? value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValue called - Raw Input: '{value}'");
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValue - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.PreTax}, New Value: {value}");
            selectedInvestment.PreTax = value;
            preTaxDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValue SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValue ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValue - selectedInvestment is null");
        }
    }

    private async Task UpdateRothValue(decimal? value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateRothValue called - Raw Input: '{value}'");
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateRothValue - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.Roth}, New Value: {value}");
            selectedInvestment.Roth = value;
            rothDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateRothValue SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateRothValue ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateRothValue - selectedInvestment is null");
        }
    }

    private async Task UpdateAfterTaxValue(decimal? value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValue called - Raw Input: '{value}'");
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValue - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.AfterTax}, New Value: {value}");
            selectedInvestment.AfterTax = value;
            afterTaxDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValue SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValue ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValue - selectedInvestment is null");
        }
    }

    private async Task UpdateTaxPaidValue(decimal? value)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValue called - Raw Input: '{value}'");
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValue - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.TaxPaid}, New Value: {value}");
            selectedInvestment.TaxPaid = value;
            taxPaidDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValue SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValue ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValue - selectedInvestment is null");
        }
    }

    // @onchange event handlers for immediate database updates
    private async Task UpdatePreTaxValueFromInput(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput called - Raw Input: '{e.Value}'");
        
        Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - selectedInvestment is null: {selectedInvestment == null}");
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - selectedInvestment.InvestmentId: {selectedInvestment.InvestmentId}");
        }
        
        string inputString = e.Value?.ToString() ?? "";
        Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Input string: '{inputString}'");
        
        // Try parsing with different methods
        bool parseSuccess = decimal.TryParse(inputString, out decimal value);
        Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Parse success: {parseSuccess}, Parsed value: {value}");
        
        if (!parseSuccess)
        {
            // Try removing commas and parsing again
            string cleanInput = inputString.Replace(",", "").Replace("$", "").Trim();
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Clean input: '{cleanInput}'");
            parseSuccess = decimal.TryParse(cleanInput, out value);
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Clean parse success: {parseSuccess}, Parsed value: {value}");
        }
        
        if (selectedInvestment != null && parseSuccess)
        {
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.PreTax}, New Value: {value}");
            
            // Get the current value from database before update
            var dbInvestmentBefore = await InvestmentService.GetInvestmentByIdAsync(selectedInvestment.InvestmentId);
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - DB Value BEFORE update: {dbInvestmentBefore?.PreTax}");
            
            selectedInvestment.PreTax = value;
            preTaxDecimal = value; // Update local variable for UI display
            
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - selectedInvestment.PreTax after assignment: {selectedInvestment.PreTax}");
            
            try
            {
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - About to call InvestmentService.UpdateInvestmentAsync");
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
                
                // Get the value from database after update to verify
                var dbInvestmentAfter = await InvestmentService.GetInvestmentByIdAsync(selectedInvestment.InvestmentId);
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - DB Value AFTER update: {dbInvestmentAfter?.PreTax}");
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Update successful: {dbInvestmentAfter?.PreTax == value}");
                
                // Force refresh the selected investment from database
                selectedInvestment = await InvestmentService.GetInvestmentByIdAsync(selectedInvestment.InvestmentId);
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - selectedInvestment refreshed from DB: {selectedInvestment?.PreTax}");
                
                // Update the local UI variable
                preTaxDecimal = selectedInvestment?.PreTax ?? 0;
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - preTaxDecimal updated to: {preTaxDecimal}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
                Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput ERROR - Stack Trace: {ex.StackTrace}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - Failed to parse decimal or selectedInvestment is null");
            Console.WriteLine($"[InvestmentsTable] UpdatePreTaxValueFromInput - selectedInvestment null: {selectedInvestment == null}, parseSuccess: {parseSuccess}");
        }
    }

    private async Task UpdateRothValueFromInput(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateRothValueFromInput called - Raw Input: '{e.Value}'");
        if (selectedInvestment != null && decimal.TryParse(e.Value?.ToString(), out decimal value))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateRothValueFromInput - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.Roth}, New Value: {value}");
            selectedInvestment.Roth = value;
            rothDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateRothValueFromInput SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateRothValueFromInput ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateRothValueFromInput - Failed to parse decimal or selectedInvestment is null");
        }
    }

    private async Task UpdateAfterTaxValueFromInput(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValueFromInput called - Raw Input: '{e.Value}'");
        if (selectedInvestment != null && decimal.TryParse(e.Value?.ToString(), out decimal value))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValueFromInput - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.AfterTax}, New Value: {value}");
            selectedInvestment.AfterTax = value;
            afterTaxDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValueFromInput SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValueFromInput ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateAfterTaxValueFromInput - Failed to parse decimal or selectedInvestment is null");
        }
    }

    private async Task UpdateTaxPaidValueFromInput(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValueFromInput called - Raw Input: '{e.Value}'");
        if (selectedInvestment != null && decimal.TryParse(e.Value?.ToString(), out decimal value))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValueFromInput - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.TaxPaid}, New Value: {value}");
            selectedInvestment.TaxPaid = value;
            taxPaidDecimal = value; // Update local variable for UI display
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValueFromInput SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValueFromInput ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateTaxPaidValueFromInput - Failed to parse decimal or selectedInvestment is null");
        }
    }

    private async Task OnDebtsSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[InvestmentsTable] OnDebtsSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated debts based on selection
        allAssociatedDebts = selectedIndices
            .Where(index => index < allAvailableDebts.Count)
            .Select(index => allAvailableDebts[index])
            .ToList();
        
        // Update the selected investment's associated debts
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] OnDebtsSelectionChanged - Investment ID: {selectedInvestment.InvestmentId}, Old Associated Debts: [{string.Join(", ", selectedInvestment.AssociatedDebts)}], New: [{string.Join(", ", selectedIndices)}]");
            selectedInvestment.AssociatedDebts = selectedIndices.ToList();
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] OnDebtsSelectionChanged SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] OnDebtsSelectionChanged ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] OnDebtsSelectionChanged - selectedInvestment is null");
        }
        
        StateHasChanged();
    }

    private async Task OnIncomesSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[InvestmentsTable] OnIncomesSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated incomes based on selection
        allAssociatedIncomes = selectedIndices
            .Where(index => index < allAvailableIncomes.Count)
            .Select(index => allAvailableIncomes[index])
            .ToList();
        
        // Update the selected investment's associated incomes
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] OnIncomesSelectionChanged - Investment ID: {selectedInvestment.InvestmentId}, Old Associated Incomes: [{string.Join(", ", selectedInvestment.AssociatedIncomes ?? new List<int>())}], New: [{string.Join(", ", selectedIndices)}]");
            selectedInvestment.AssociatedIncomes = selectedIndices.ToList();
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] OnIncomesSelectionChanged SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] OnIncomesSelectionChanged ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] OnIncomesSelectionChanged - selectedInvestment is null");
        }
        
        StateHasChanged();
    }

    private async Task OnInsurancesSelectionChanged(List<int> selectedIndices)
    {
        Console.WriteLine($"[InvestmentsTable] OnInsurancesSelectionChanged called - Selected Indices: [{string.Join(", ", selectedIndices)}]");
        // Update the associated insurances based on selection
        allAssociatedInsurances = selectedIndices
            .Where(index => index < allAvailableInsurances.Count)
            .Select(index => allAvailableInsurances[index])
            .ToList();
        
        // Update the selected investment's associated insurances
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] OnInsurancesSelectionChanged - Investment ID: {selectedInvestment.InvestmentId}, Old Associated Insurances: [{string.Join(", ", selectedInvestment.AssociatedInsurances)}], New: [{string.Join(", ", selectedIndices)}]");
            selectedInvestment.AssociatedInsurances = selectedIndices.ToList();
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] OnInsurancesSelectionChanged SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] OnInsurancesSelectionChanged ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] OnInsurancesSelectionChanged - selectedInvestment is null");
        }
        
        StateHasChanged();
    }

    private List<int> GetCurrentlySelectedDebtIndices()
    {
        if (selectedInvestment == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var debtIndex in selectedInvestment.AssociatedDebts)
        {
            if (debtIndex < allAvailableDebts.Count)
            {
                indices.Add(debtIndex);
            }
        }
        return indices;
    }

    private List<int> GetCurrentlySelectedIncomeIndices()
    {
        if (selectedInvestment == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var incomeIndex in selectedInvestment.AssociatedIncomes)
        {
            if (incomeIndex < allAvailableIncomes.Count)
            {
                indices.Add(incomeIndex);
            }
        }
        return indices;
    }

    private List<int> GetCurrentlySelectedInsuranceIndices()
    {
        if (selectedInvestment == null) return new List<int>();
        
        var indices = new List<int>();
        foreach (var insuranceIndex in selectedInvestment.AssociatedInsurances)
        {
            if (insuranceIndex < allAvailableInsurances.Count)
            {
                indices.Add(insuranceIndex);
            }
        }
        return indices;
    }

    private async Task UpdateFirm(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateFirm called - Raw Input: '{e.Value}'");
        if (selectedInvestment != null)
        {
            Console.WriteLine($"[InvestmentsTable] UpdateFirm - Investment ID: {selectedInvestment.InvestmentId}, Old Value: '{selectedInvestment.Firm}', New Value: '{e.Value}'");
            selectedInvestment.Firm = e.Value?.ToString() ?? "";
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateFirm SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateFirm ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateFirm - selectedInvestment is null");
        }
    }

    private async Task UpdateOutside(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] UpdateOutside called - Raw Input: '{e.Value}'");
        if (selectedInvestment != null && bool.TryParse(e.Value?.ToString(), out bool value))
        {
            Console.WriteLine($"[InvestmentsTable] UpdateOutside - Investment ID: {selectedInvestment.InvestmentId}, Old Value: {selectedInvestment.Outside}, New Value: {value}");
            selectedInvestment.Outside = value;
            try
            {
                await InvestmentService.UpdateInvestmentAsync(selectedInvestment);
                Console.WriteLine($"[InvestmentsTable] UpdateOutside SUCCESS - Investment ID: {selectedInvestment.InvestmentId} updated in database");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[InvestmentsTable] UpdateOutside ERROR - Investment ID: {selectedInvestment.InvestmentId}, Error: {ex.Message}");
            }
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] UpdateOutside - Failed to parse boolean or selectedInvestment is null");
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    // Number input formatting handlers
    private async Task HandleNumberInput(ChangeEventArgs e)
    {
        Console.WriteLine($"[InvestmentsTable] HandleNumberInput called - Raw Input: '{e.Value}'");
        
        if (e.Value == null) 
        {
            Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Input is null, returning");
            return;
        }
        
        string input = e.Value.ToString() ?? "";
        Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Processing input: '{input}'");
        
        // Special handling for decimal input
        if (input.EndsWith("."))
        {
            Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Input ends with decimal point, formatting and returning");
            await JSRuntime.InvokeVoidAsync("formatNumberInput", input);
            return;
        }

        // If we're in the middle of typing a decimal number, don't format yet
        if (input.Contains(".") && !input.EndsWith("."))
        {
            string[] parts = input.Split('.');
            if (parts.Length == 2 && parts[1].Length < 2)
            {
                Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Incomplete decimal input, formatting and returning");
                await JSRuntime.InvokeVoidAsync("formatNumberInput", input);
                return;
            }
        }
        
        // Remove any non-numeric characters except decimal point
        string numericOnly = new string(input.Where(c => char.IsDigit(c) || c == '.').ToArray());
        Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Numeric only: '{numericOnly}'");
        
        if (decimal.TryParse(numericOnly, out decimal result))
        {
            Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Parsed decimal: {result}");
            
            // Format the number with commas and 2 decimal places only if needed
            string formatted = FormatNumber(result);
            Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Formatted: '{formatted}'");
            
            // Update the input value using JS interop
            await JSRuntime.InvokeVoidAsync("formatNumberInput", formatted);
        }
        else
        {
            Console.WriteLine($"[InvestmentsTable] HandleNumberInput - Failed to parse as decimal");
        }
    }

    private async Task HandleInputBlur(FocusEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("handleInputBlur");
    }

    private string FormatNumber(decimal value)
    {
        // If the decimal part is zero, format without decimals
        if (value % 1 == 0)
        {
            return value.ToString("N0");
        }
        return value.ToString("N2");
    }
}

<script>
    window.formatNumberInput = (value) => {
        const activeElement = document.activeElement;
        if (activeElement && activeElement.classList.contains('breakdown-input')) {
            activeElement.value = value;
        }
    };

    window.handleInputBlur = () => {
        const activeElement = document.activeElement;
        if (activeElement && activeElement.classList.contains('breakdown-input')) {
            // Set cursor to start of input
            activeElement.setSelectionRange(0, 0);
            
            // If the value ends with a decimal point, remove it
            if (activeElement.value.endsWith('.')) {
                activeElement.value = activeElement.value.slice(0, -1);
            }
        }
    };
</script>

<script src="/js/input-formatting.js"></script>
